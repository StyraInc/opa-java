/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.openapi.utils.SpeakeasyMetadata;
import com.styra.opa.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=bearer,name=Authorization")
    private Optional<? extends String> bearerAuth;

    @JsonCreator
    public Security(
            Optional<? extends String> bearerAuth) {
        Utils.checkNotNull(bearerAuth, "bearerAuth");
        this.bearerAuth = bearerAuth;
    }
    
    public Security() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> bearerAuth() {
        return (Optional<String>) bearerAuth;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withBearerAuth(String bearerAuth) {
        Utils.checkNotNull(bearerAuth, "bearerAuth");
        this.bearerAuth = Optional.ofNullable(bearerAuth);
        return this;
    }

    public Security withBearerAuth(Optional<? extends String> bearerAuth) {
        Utils.checkNotNull(bearerAuth, "bearerAuth");
        this.bearerAuth = bearerAuth;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            java.util.Objects.deepEquals(this.bearerAuth, other.bearerAuth);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bearerAuth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "bearerAuth", bearerAuth);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> bearerAuth = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bearerAuth(String bearerAuth) {
            Utils.checkNotNull(bearerAuth, "bearerAuth");
            this.bearerAuth = Optional.ofNullable(bearerAuth);
            return this;
        }

        public Builder bearerAuth(Optional<? extends String> bearerAuth) {
            Utils.checkNotNull(bearerAuth, "bearerAuth");
            this.bearerAuth = bearerAuth;
            return this;
        }
        
        public Security build() {
            return new Security(
                bearerAuth);
        }
    }
}

