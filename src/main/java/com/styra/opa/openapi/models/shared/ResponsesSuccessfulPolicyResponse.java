/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ResponsesSuccessfulPolicyResponse {

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    private Optional<? extends Result> result;

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metrics")
    private Optional<? extends java.util.Map<String, java.lang.Object>> metrics;

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decision_id")
    private Optional<? extends String> decisionId;

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provenance")
    private Optional<? extends Provenance> provenance;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_status_code")
    private Optional<? extends String> httpStatusCode;

    @JsonCreator
    public ResponsesSuccessfulPolicyResponse(
            @JsonProperty("result") Optional<? extends Result> result,
            @JsonProperty("metrics") Optional<? extends java.util.Map<String, java.lang.Object>> metrics,
            @JsonProperty("decision_id") Optional<? extends String> decisionId,
            @JsonProperty("provenance") Optional<? extends Provenance> provenance,
            @JsonProperty("http_status_code") Optional<? extends String> httpStatusCode) {
        Utils.checkNotNull(result, "result");
        Utils.checkNotNull(metrics, "metrics");
        Utils.checkNotNull(decisionId, "decisionId");
        Utils.checkNotNull(provenance, "provenance");
        Utils.checkNotNull(httpStatusCode, "httpStatusCode");
        this.result = result;
        this.metrics = metrics;
        this.decisionId = decisionId;
        this.provenance = provenance;
        this.httpStatusCode = httpStatusCode;
    }
    
    public ResponsesSuccessfulPolicyResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Result> result() {
        return (Optional<Result>) result;
    }

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.Map<String, java.lang.Object>> metrics() {
        return (Optional<java.util.Map<String, java.lang.Object>>) metrics;
    }

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> decisionId() {
        return (Optional<String>) decisionId;
    }

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Provenance> provenance() {
        return (Optional<Provenance>) provenance;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> httpStatusCode() {
        return (Optional<String>) httpStatusCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    public ResponsesSuccessfulPolicyResponse withResult(Result result) {
        Utils.checkNotNull(result, "result");
        this.result = Optional.ofNullable(result);
        return this;
    }

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    public ResponsesSuccessfulPolicyResponse withResult(Optional<? extends Result> result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
        return this;
    }

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    public ResponsesSuccessfulPolicyResponse withMetrics(java.util.Map<String, java.lang.Object> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = Optional.ofNullable(metrics);
        return this;
    }

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    public ResponsesSuccessfulPolicyResponse withMetrics(Optional<? extends java.util.Map<String, java.lang.Object>> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = metrics;
        return this;
    }

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    public ResponsesSuccessfulPolicyResponse withDecisionId(String decisionId) {
        Utils.checkNotNull(decisionId, "decisionId");
        this.decisionId = Optional.ofNullable(decisionId);
        return this;
    }

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    public ResponsesSuccessfulPolicyResponse withDecisionId(Optional<? extends String> decisionId) {
        Utils.checkNotNull(decisionId, "decisionId");
        this.decisionId = decisionId;
        return this;
    }

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    public ResponsesSuccessfulPolicyResponse withProvenance(Provenance provenance) {
        Utils.checkNotNull(provenance, "provenance");
        this.provenance = Optional.ofNullable(provenance);
        return this;
    }

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    public ResponsesSuccessfulPolicyResponse withProvenance(Optional<? extends Provenance> provenance) {
        Utils.checkNotNull(provenance, "provenance");
        this.provenance = provenance;
        return this;
    }

    public ResponsesSuccessfulPolicyResponse withHttpStatusCode(String httpStatusCode) {
        Utils.checkNotNull(httpStatusCode, "httpStatusCode");
        this.httpStatusCode = Optional.ofNullable(httpStatusCode);
        return this;
    }

    public ResponsesSuccessfulPolicyResponse withHttpStatusCode(Optional<? extends String> httpStatusCode) {
        Utils.checkNotNull(httpStatusCode, "httpStatusCode");
        this.httpStatusCode = httpStatusCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResponsesSuccessfulPolicyResponse other = (ResponsesSuccessfulPolicyResponse) o;
        return 
            java.util.Objects.deepEquals(this.result, other.result) &&
            java.util.Objects.deepEquals(this.metrics, other.metrics) &&
            java.util.Objects.deepEquals(this.decisionId, other.decisionId) &&
            java.util.Objects.deepEquals(this.provenance, other.provenance) &&
            java.util.Objects.deepEquals(this.httpStatusCode, other.httpStatusCode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            result,
            metrics,
            decisionId,
            provenance,
            httpStatusCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResponsesSuccessfulPolicyResponse.class,
                "result", result,
                "metrics", metrics,
                "decisionId", decisionId,
                "provenance", provenance,
                "httpStatusCode", httpStatusCode);
    }
    
    public final static class Builder {
 
        private Optional<? extends Result> result = Optional.empty();
 
        private Optional<? extends java.util.Map<String, java.lang.Object>> metrics = Optional.empty();
 
        private Optional<? extends String> decisionId = Optional.empty();
 
        private Optional<? extends Provenance> provenance = Optional.empty();
 
        private Optional<? extends String> httpStatusCode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
         */
        public Builder result(Result result) {
            Utils.checkNotNull(result, "result");
            this.result = Optional.ofNullable(result);
            return this;
        }

        /**
         * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
         */
        public Builder result(Optional<? extends Result> result) {
            Utils.checkNotNull(result, "result");
            this.result = result;
            return this;
        }

        /**
         * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
         */
        public Builder metrics(java.util.Map<String, java.lang.Object> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = Optional.ofNullable(metrics);
            return this;
        }

        /**
         * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
         */
        public Builder metrics(Optional<? extends java.util.Map<String, java.lang.Object>> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = metrics;
            return this;
        }

        /**
         * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
         */
        public Builder decisionId(String decisionId) {
            Utils.checkNotNull(decisionId, "decisionId");
            this.decisionId = Optional.ofNullable(decisionId);
            return this;
        }

        /**
         * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
         */
        public Builder decisionId(Optional<? extends String> decisionId) {
            Utils.checkNotNull(decisionId, "decisionId");
            this.decisionId = decisionId;
            return this;
        }

        /**
         * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
         */
        public Builder provenance(Provenance provenance) {
            Utils.checkNotNull(provenance, "provenance");
            this.provenance = Optional.ofNullable(provenance);
            return this;
        }

        /**
         * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
         */
        public Builder provenance(Optional<? extends Provenance> provenance) {
            Utils.checkNotNull(provenance, "provenance");
            this.provenance = provenance;
            return this;
        }

        public Builder httpStatusCode(String httpStatusCode) {
            Utils.checkNotNull(httpStatusCode, "httpStatusCode");
            this.httpStatusCode = Optional.ofNullable(httpStatusCode);
            return this;
        }

        public Builder httpStatusCode(Optional<? extends String> httpStatusCode) {
            Utils.checkNotNull(httpStatusCode, "httpStatusCode");
            this.httpStatusCode = httpStatusCode;
            return this;
        }
        
        public ResponsesSuccessfulPolicyResponse build() {
            return new ResponsesSuccessfulPolicyResponse(
                result,
                metrics,
                decisionId,
                provenance,
                httpStatusCode);
        }
    }
}

