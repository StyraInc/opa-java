/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * CompileResultSQL
 * 
 * <p>The partially evaluated result of the query, in SQL format. Result will be empty if the query is never true.
 */
public class CompileResultSQL {

    /**
     * The partially evaluated result of the query as SQL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    private Optional<? extends CompileResultSQLResult> result;

    @JsonCreator
    public CompileResultSQL(
            @JsonProperty("result") Optional<? extends CompileResultSQLResult> result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
    }
    
    public CompileResultSQL() {
        this(Optional.empty());
    }

    /**
     * The partially evaluated result of the query as SQL.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompileResultSQLResult> result() {
        return (Optional<CompileResultSQLResult>) result;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The partially evaluated result of the query as SQL.
     */
    public CompileResultSQL withResult(CompileResultSQLResult result) {
        Utils.checkNotNull(result, "result");
        this.result = Optional.ofNullable(result);
        return this;
    }

    /**
     * The partially evaluated result of the query as SQL.
     */
    public CompileResultSQL withResult(Optional<? extends CompileResultSQLResult> result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompileResultSQL other = (CompileResultSQL) o;
        return 
            Objects.deepEquals(this.result, other.result);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            result);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompileResultSQL.class,
                "result", result);
    }
    
    public final static class Builder {
 
        private Optional<? extends CompileResultSQLResult> result = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The partially evaluated result of the query as SQL.
         */
        public Builder result(CompileResultSQLResult result) {
            Utils.checkNotNull(result, "result");
            this.result = Optional.ofNullable(result);
            return this;
        }

        /**
         * The partially evaluated result of the query as SQL.
         */
        public Builder result(Optional<? extends CompileResultSQLResult> result) {
            Utils.checkNotNull(result, "result");
            this.result = result;
            return this;
        }
        
        public CompileResultSQL build() {
            return new CompileResultSQL(
                result);
        }
    }
}
