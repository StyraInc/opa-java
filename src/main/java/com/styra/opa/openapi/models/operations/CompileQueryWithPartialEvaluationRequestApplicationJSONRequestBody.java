/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.models.shared.CompileOptions;
import com.styra.opa.openapi.models.shared.Input;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody
 * 
 * <p>The query, input, and other settings for partial evaluation.
 */
public class CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody {

    /**
     * Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends CompileOptions> options;

    /**
     * The terms to treat as unknown during partial evaluation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unknowns")
    private Optional<? extends List<String>> unknowns;

    /**
     * Arbitrary JSON used within your policies by accessing `input`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("input")
    private Optional<? extends Input> input;

    @JsonCreator
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody(
            @JsonProperty("options") Optional<? extends CompileOptions> options,
            @JsonProperty("unknowns") Optional<? extends List<String>> unknowns,
            @JsonProperty("input") Optional<? extends Input> input) {
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(unknowns, "unknowns");
        Utils.checkNotNull(input, "input");
        this.options = options;
        this.unknowns = unknowns;
        this.input = input;
    }
    
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompileOptions> options() {
        return (Optional<CompileOptions>) options;
    }

    /**
     * The terms to treat as unknown during partial evaluation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> unknowns() {
        return (Optional<List<String>>) unknowns;
    }

    /**
     * Arbitrary JSON used within your policies by accessing `input`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Input> input() {
        return (Optional<Input>) input;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
     */
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody withOptions(CompileOptions options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
     */
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody withOptions(Optional<? extends CompileOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    /**
     * The terms to treat as unknown during partial evaluation.
     */
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody withUnknowns(List<String> unknowns) {
        Utils.checkNotNull(unknowns, "unknowns");
        this.unknowns = Optional.ofNullable(unknowns);
        return this;
    }

    /**
     * The terms to treat as unknown during partial evaluation.
     */
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody withUnknowns(Optional<? extends List<String>> unknowns) {
        Utils.checkNotNull(unknowns, "unknowns");
        this.unknowns = unknowns;
        return this;
    }

    /**
     * Arbitrary JSON used within your policies by accessing `input`
     */
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody withInput(Input input) {
        Utils.checkNotNull(input, "input");
        this.input = Optional.ofNullable(input);
        return this;
    }

    /**
     * Arbitrary JSON used within your policies by accessing `input`
     */
    public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody withInput(Optional<? extends Input> input) {
        Utils.checkNotNull(input, "input");
        this.input = input;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody other = (CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody) o;
        return 
            Objects.deepEquals(this.options, other.options) &&
            Objects.deepEquals(this.unknowns, other.unknowns) &&
            Objects.deepEquals(this.input, other.input);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            options,
            unknowns,
            input);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody.class,
                "options", options,
                "unknowns", unknowns,
                "input", input);
    }
    
    public final static class Builder {
 
        private Optional<? extends CompileOptions> options = Optional.empty();
 
        private Optional<? extends List<String>> unknowns = Optional.empty();
 
        private Optional<? extends Input> input = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
         */
        public Builder options(CompileOptions options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
         */
        public Builder options(Optional<? extends CompileOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        /**
         * The terms to treat as unknown during partial evaluation.
         */
        public Builder unknowns(List<String> unknowns) {
            Utils.checkNotNull(unknowns, "unknowns");
            this.unknowns = Optional.ofNullable(unknowns);
            return this;
        }

        /**
         * The terms to treat as unknown during partial evaluation.
         */
        public Builder unknowns(Optional<? extends List<String>> unknowns) {
            Utils.checkNotNull(unknowns, "unknowns");
            this.unknowns = unknowns;
            return this;
        }

        /**
         * Arbitrary JSON used within your policies by accessing `input`
         */
        public Builder input(Input input) {
            Utils.checkNotNull(input, "input");
            this.input = Optional.ofNullable(input);
            return this;
        }

        /**
         * Arbitrary JSON used within your policies by accessing `input`
         */
        public Builder input(Optional<? extends Input> input) {
            Utils.checkNotNull(input, "input");
            this.input = input;
            return this;
        }
        
        public CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody build() {
            return new CompileQueryWithPartialEvaluationRequestApplicationJSONRequestBody(
                options,
                unknowns,
                input);
        }
    }
}
