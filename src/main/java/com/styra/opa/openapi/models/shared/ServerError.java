/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ServerError {

    @JsonProperty("code")
    private String code;

    @JsonProperty("message")
    private String message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<Errors>> errors;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decision_id")
    private Optional<String> decisionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_status_code")
    private Optional<String> httpStatusCode;

    @JsonCreator
    public ServerError(
            @JsonProperty("code") String code,
            @JsonProperty("message") String message,
            @JsonProperty("errors") Optional<? extends List<Errors>> errors,
            @JsonProperty("decision_id") Optional<String> decisionId,
            @JsonProperty("http_status_code") Optional<String> httpStatusCode) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(errors, "errors");
        Utils.checkNotNull(decisionId, "decisionId");
        Utils.checkNotNull(httpStatusCode, "httpStatusCode");
        this.code = code;
        this.message = message;
        this.errors = errors;
        this.decisionId = decisionId;
        this.httpStatusCode = httpStatusCode;
    }
    
    public ServerError(
            String code,
            String message) {
        this(code, message, Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String code() {
        return code;
    }

    @JsonIgnore
    public String message() {
        return message;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Errors>> errors() {
        return (Optional<List<Errors>>) errors;
    }

    @JsonIgnore
    public Optional<String> decisionId() {
        return decisionId;
    }

    @JsonIgnore
    public Optional<String> httpStatusCode() {
        return httpStatusCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ServerError withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public ServerError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public ServerError withErrors(List<Errors> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    public ServerError withErrors(Optional<? extends List<Errors>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    public ServerError withDecisionId(String decisionId) {
        Utils.checkNotNull(decisionId, "decisionId");
        this.decisionId = Optional.ofNullable(decisionId);
        return this;
    }

    public ServerError withDecisionId(Optional<String> decisionId) {
        Utils.checkNotNull(decisionId, "decisionId");
        this.decisionId = decisionId;
        return this;
    }

    public ServerError withHttpStatusCode(String httpStatusCode) {
        Utils.checkNotNull(httpStatusCode, "httpStatusCode");
        this.httpStatusCode = Optional.ofNullable(httpStatusCode);
        return this;
    }

    public ServerError withHttpStatusCode(Optional<String> httpStatusCode) {
        Utils.checkNotNull(httpStatusCode, "httpStatusCode");
        this.httpStatusCode = httpStatusCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServerError other = (ServerError) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.errors, other.errors) &&
            Objects.deepEquals(this.decisionId, other.decisionId) &&
            Objects.deepEquals(this.httpStatusCode, other.httpStatusCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            message,
            errors,
            decisionId,
            httpStatusCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServerError.class,
                "code", code,
                "message", message,
                "errors", errors,
                "decisionId", decisionId,
                "httpStatusCode", httpStatusCode);
    }
    
    public final static class Builder {
 
        private String code;
 
        private String message;
 
        private Optional<? extends List<Errors>> errors = Optional.empty();
 
        private Optional<String> decisionId = Optional.empty();
 
        private Optional<String> httpStatusCode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder errors(List<Errors> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public Builder errors(Optional<? extends List<Errors>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }

        public Builder decisionId(String decisionId) {
            Utils.checkNotNull(decisionId, "decisionId");
            this.decisionId = Optional.ofNullable(decisionId);
            return this;
        }

        public Builder decisionId(Optional<String> decisionId) {
            Utils.checkNotNull(decisionId, "decisionId");
            this.decisionId = decisionId;
            return this;
        }

        public Builder httpStatusCode(String httpStatusCode) {
            Utils.checkNotNull(httpStatusCode, "httpStatusCode");
            this.httpStatusCode = Optional.ofNullable(httpStatusCode);
            return this;
        }

        public Builder httpStatusCode(Optional<String> httpStatusCode) {
            Utils.checkNotNull(httpStatusCode, "httpStatusCode");
            this.httpStatusCode = httpStatusCode;
            return this;
        }
        
        public ServerError build() {
            return new ServerError(
                code,
                message,
                errors,
                decisionId,
                httpStatusCode);
        }
    }
}

