/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class Location {

    @JsonProperty("file")
    private String file;

    @JsonProperty("row")
    private long row;

    @JsonProperty("col")
    private long col;

    @JsonCreator
    public Location(
            @JsonProperty("file") String file,
            @JsonProperty("row") long row,
            @JsonProperty("col") long col) {
        Utils.checkNotNull(file, "file");
        Utils.checkNotNull(row, "row");
        Utils.checkNotNull(col, "col");
        this.file = file;
        this.row = row;
        this.col = col;
    }

    @JsonIgnore
    public String file() {
        return file;
    }

    @JsonIgnore
    public long row() {
        return row;
    }

    @JsonIgnore
    public long col() {
        return col;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Location withFile(String file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
        return this;
    }

    public Location withRow(long row) {
        Utils.checkNotNull(row, "row");
        this.row = row;
        return this;
    }

    public Location withCol(long col) {
        Utils.checkNotNull(col, "col");
        this.col = col;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Location other = (Location) o;
        return 
            java.util.Objects.deepEquals(this.file, other.file) &&
            java.util.Objects.deepEquals(this.row, other.row) &&
            java.util.Objects.deepEquals(this.col, other.col);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            file,
            row,
            col);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Location.class,
                "file", file,
                "row", row,
                "col", col);
    }
    
    public final static class Builder {
 
        private String file;
 
        private Long row;
 
        private Long col;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder file(String file) {
            Utils.checkNotNull(file, "file");
            this.file = file;
            return this;
        }

        public Builder row(long row) {
            Utils.checkNotNull(row, "row");
            this.row = row;
            return this;
        }

        public Builder col(long col) {
            Utils.checkNotNull(col, "col");
            this.col = col;
            return this;
        }
        
        public Location build() {
            return new Location(
                file,
                row,
                col);
        }
    }
}

