/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;

public class BatchServerError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch_decision_id")
    private Optional<? extends String> batchDecisionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responses")
    private Optional<? extends java.util.Map<String, ServerError>> responses;

    @JsonCreator
    public BatchServerError(
            @JsonProperty("batch_decision_id") Optional<? extends String> batchDecisionId,
            @JsonProperty("responses") Optional<? extends java.util.Map<String, ServerError>> responses) {
        Utils.checkNotNull(batchDecisionId, "batchDecisionId");
        Utils.checkNotNull(responses, "responses");
        this.batchDecisionId = batchDecisionId;
        this.responses = responses;
    }
    
    public BatchServerError() {
        this(Optional.empty(), Optional.empty());
    }

    public Optional<? extends String> batchDecisionId(){
        return batchDecisionId;
    }

    public Optional<? extends java.util.Map<String, ServerError>> responses(){
        return responses;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public BatchServerError withBatchDecisionId(String batchDecisionId) {
        Utils.checkNotNull(batchDecisionId, "batchDecisionId");
        this.batchDecisionId = Optional.ofNullable(batchDecisionId);
        return this;
    }
    
    public BatchServerError withBatchDecisionId(Optional<? extends String> batchDecisionId) {
        Utils.checkNotNull(batchDecisionId, "batchDecisionId");
        this.batchDecisionId = batchDecisionId;
        return this;
    }

    public BatchServerError withResponses(java.util.Map<String, ServerError> responses) {
        Utils.checkNotNull(responses, "responses");
        this.responses = Optional.ofNullable(responses);
        return this;
    }
    
    public BatchServerError withResponses(Optional<? extends java.util.Map<String, ServerError>> responses) {
        Utils.checkNotNull(responses, "responses");
        this.responses = responses;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BatchServerError other = (BatchServerError) o;
        return
            java.util.Objects.deepEquals(this.batchDecisionId, other.batchDecisionId) &&
            java.util.Objects.deepEquals(this.responses, other.responses);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            batchDecisionId,
            responses);
    }

    @Override
    public String toString() {
        return Utils.toString(BatchServerError.class,
                "batchDecisionId", batchDecisionId,
                "responses", responses);
    }

    public final static class Builder {

        private Optional<? extends String> batchDecisionId = Optional.empty();

        private Optional<? extends java.util.Map<String, ServerError>> responses = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder batchDecisionId(String batchDecisionId) {
            Utils.checkNotNull(batchDecisionId, "batchDecisionId");
            this.batchDecisionId = Optional.ofNullable(batchDecisionId);
            return this;
        }
        
        public Builder batchDecisionId(Optional<? extends String> batchDecisionId) {
            Utils.checkNotNull(batchDecisionId, "batchDecisionId");
            this.batchDecisionId = batchDecisionId;
            return this;
        }

        public Builder responses(java.util.Map<String, ServerError> responses) {
            Utils.checkNotNull(responses, "responses");
            this.responses = Optional.ofNullable(responses);
            return this;
        }
        
        public Builder responses(Optional<? extends java.util.Map<String, ServerError>> responses) {
            Utils.checkNotNull(responses, "responses");
            this.responses = responses;
            return this;
        }

        public BatchServerError build() {
            return new BatchServerError(
                batchDecisionId,
                responses);
        }
    }
}
