/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.openapi.models.shared.Explain;
import com.styra.opa.openapi.models.shared.GzipAcceptEncoding;
import com.styra.opa.openapi.models.shared.GzipContentEncoding;
import com.styra.opa.openapi.utils.LazySingletonValue;
import com.styra.opa.openapi.utils.SpeakeasyMetadata;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CompileQueryWithPartialEvaluationRequest {

    /**
     * The path separator is used to access values inside object and array documents. If the path indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,allowReserved=true,name=path")
    private String path;

    /**
     * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Accept-Encoding")
    private Optional<? extends GzipAcceptEncoding> acceptEncoding;

    /**
     * Indicates that the request body is gzip encoded
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Content-Encoding")
    private Optional<? extends GzipContentEncoding> contentEncoding;

    /**
     * If parameter is `true`, response will formatted for humans.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pretty")
    private Optional<Boolean> pretty;

    /**
     * Return query explanation in addition to result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=explain")
    private Optional<? extends Explain> explain;

    /**
     * Return query performance metrics in addition to result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metrics")
    private Optional<Boolean> metrics;

    /**
     * Instrument query evaluation and return a superset of performance metrics in addition to result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=instrument")
    private Optional<Boolean> instrument;

    /**
     * The query, input, and other settings for partial evaluation.
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private CompileQueryWithPartialEvaluationRequestBody requestBody;

    @JsonCreator
    public CompileQueryWithPartialEvaluationRequest(
            String path,
            Optional<? extends GzipAcceptEncoding> acceptEncoding,
            Optional<? extends GzipContentEncoding> contentEncoding,
            Optional<Boolean> pretty,
            Optional<? extends Explain> explain,
            Optional<Boolean> metrics,
            Optional<Boolean> instrument,
            CompileQueryWithPartialEvaluationRequestBody requestBody) {
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(acceptEncoding, "acceptEncoding");
        Utils.checkNotNull(contentEncoding, "contentEncoding");
        Utils.checkNotNull(pretty, "pretty");
        Utils.checkNotNull(explain, "explain");
        Utils.checkNotNull(metrics, "metrics");
        Utils.checkNotNull(instrument, "instrument");
        Utils.checkNotNull(requestBody, "requestBody");
        this.path = path;
        this.acceptEncoding = acceptEncoding;
        this.contentEncoding = contentEncoding;
        this.pretty = pretty;
        this.explain = explain;
        this.metrics = metrics;
        this.instrument = instrument;
        this.requestBody = requestBody;
    }
    
    public CompileQueryWithPartialEvaluationRequest(
            String path,
            CompileQueryWithPartialEvaluationRequestBody requestBody) {
        this(path, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), requestBody);
    }

    /**
     * The path separator is used to access values inside object and array documents. If the path indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    /**
     * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GzipAcceptEncoding> acceptEncoding() {
        return (Optional<GzipAcceptEncoding>) acceptEncoding;
    }

    /**
     * Indicates that the request body is gzip encoded
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GzipContentEncoding> contentEncoding() {
        return (Optional<GzipContentEncoding>) contentEncoding;
    }

    /**
     * If parameter is `true`, response will formatted for humans.
     */
    @JsonIgnore
    public Optional<Boolean> pretty() {
        return pretty;
    }

    /**
     * Return query explanation in addition to result.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Explain> explain() {
        return (Optional<Explain>) explain;
    }

    /**
     * Return query performance metrics in addition to result.
     */
    @JsonIgnore
    public Optional<Boolean> metrics() {
        return metrics;
    }

    /**
     * Instrument query evaluation and return a superset of performance metrics in addition to result.
     */
    @JsonIgnore
    public Optional<Boolean> instrument() {
        return instrument;
    }

    /**
     * The query, input, and other settings for partial evaluation.
     */
    @JsonIgnore
    public CompileQueryWithPartialEvaluationRequestBody requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The path separator is used to access values inside object and array documents. If the path indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     */
    public CompileQueryWithPartialEvaluationRequest withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
     */
    public CompileQueryWithPartialEvaluationRequest withAcceptEncoding(GzipAcceptEncoding acceptEncoding) {
        Utils.checkNotNull(acceptEncoding, "acceptEncoding");
        this.acceptEncoding = Optional.ofNullable(acceptEncoding);
        return this;
    }

    /**
     * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
     */
    public CompileQueryWithPartialEvaluationRequest withAcceptEncoding(Optional<? extends GzipAcceptEncoding> acceptEncoding) {
        Utils.checkNotNull(acceptEncoding, "acceptEncoding");
        this.acceptEncoding = acceptEncoding;
        return this;
    }

    /**
     * Indicates that the request body is gzip encoded
     */
    public CompileQueryWithPartialEvaluationRequest withContentEncoding(GzipContentEncoding contentEncoding) {
        Utils.checkNotNull(contentEncoding, "contentEncoding");
        this.contentEncoding = Optional.ofNullable(contentEncoding);
        return this;
    }

    /**
     * Indicates that the request body is gzip encoded
     */
    public CompileQueryWithPartialEvaluationRequest withContentEncoding(Optional<? extends GzipContentEncoding> contentEncoding) {
        Utils.checkNotNull(contentEncoding, "contentEncoding");
        this.contentEncoding = contentEncoding;
        return this;
    }

    /**
     * If parameter is `true`, response will formatted for humans.
     */
    public CompileQueryWithPartialEvaluationRequest withPretty(boolean pretty) {
        Utils.checkNotNull(pretty, "pretty");
        this.pretty = Optional.ofNullable(pretty);
        return this;
    }

    /**
     * If parameter is `true`, response will formatted for humans.
     */
    public CompileQueryWithPartialEvaluationRequest withPretty(Optional<Boolean> pretty) {
        Utils.checkNotNull(pretty, "pretty");
        this.pretty = pretty;
        return this;
    }

    /**
     * Return query explanation in addition to result.
     */
    public CompileQueryWithPartialEvaluationRequest withExplain(Explain explain) {
        Utils.checkNotNull(explain, "explain");
        this.explain = Optional.ofNullable(explain);
        return this;
    }

    /**
     * Return query explanation in addition to result.
     */
    public CompileQueryWithPartialEvaluationRequest withExplain(Optional<? extends Explain> explain) {
        Utils.checkNotNull(explain, "explain");
        this.explain = explain;
        return this;
    }

    /**
     * Return query performance metrics in addition to result.
     */
    public CompileQueryWithPartialEvaluationRequest withMetrics(boolean metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = Optional.ofNullable(metrics);
        return this;
    }

    /**
     * Return query performance metrics in addition to result.
     */
    public CompileQueryWithPartialEvaluationRequest withMetrics(Optional<Boolean> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = metrics;
        return this;
    }

    /**
     * Instrument query evaluation and return a superset of performance metrics in addition to result.
     */
    public CompileQueryWithPartialEvaluationRequest withInstrument(boolean instrument) {
        Utils.checkNotNull(instrument, "instrument");
        this.instrument = Optional.ofNullable(instrument);
        return this;
    }

    /**
     * Instrument query evaluation and return a superset of performance metrics in addition to result.
     */
    public CompileQueryWithPartialEvaluationRequest withInstrument(Optional<Boolean> instrument) {
        Utils.checkNotNull(instrument, "instrument");
        this.instrument = instrument;
        return this;
    }

    /**
     * The query, input, and other settings for partial evaluation.
     */
    public CompileQueryWithPartialEvaluationRequest withRequestBody(CompileQueryWithPartialEvaluationRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompileQueryWithPartialEvaluationRequest other = (CompileQueryWithPartialEvaluationRequest) o;
        return 
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.acceptEncoding, other.acceptEncoding) &&
            Objects.deepEquals(this.contentEncoding, other.contentEncoding) &&
            Objects.deepEquals(this.pretty, other.pretty) &&
            Objects.deepEquals(this.explain, other.explain) &&
            Objects.deepEquals(this.metrics, other.metrics) &&
            Objects.deepEquals(this.instrument, other.instrument) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            path,
            acceptEncoding,
            contentEncoding,
            pretty,
            explain,
            metrics,
            instrument,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompileQueryWithPartialEvaluationRequest.class,
                "path", path,
                "acceptEncoding", acceptEncoding,
                "contentEncoding", contentEncoding,
                "pretty", pretty,
                "explain", explain,
                "metrics", metrics,
                "instrument", instrument,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String path;
 
        private Optional<? extends GzipAcceptEncoding> acceptEncoding = Optional.empty();
 
        private Optional<? extends GzipContentEncoding> contentEncoding = Optional.empty();
 
        private Optional<Boolean> pretty = Optional.empty();
 
        private Optional<? extends Explain> explain = Optional.empty();
 
        private Optional<Boolean> metrics = Optional.empty();
 
        private Optional<Boolean> instrument = Optional.empty();
 
        private CompileQueryWithPartialEvaluationRequestBody requestBody;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The path separator is used to access values inside object and array documents. If the path indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        /**
         * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
         */
        public Builder acceptEncoding(GzipAcceptEncoding acceptEncoding) {
            Utils.checkNotNull(acceptEncoding, "acceptEncoding");
            this.acceptEncoding = Optional.ofNullable(acceptEncoding);
            return this;
        }

        /**
         * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
         */
        public Builder acceptEncoding(Optional<? extends GzipAcceptEncoding> acceptEncoding) {
            Utils.checkNotNull(acceptEncoding, "acceptEncoding");
            this.acceptEncoding = acceptEncoding;
            return this;
        }

        /**
         * Indicates that the request body is gzip encoded
         */
        public Builder contentEncoding(GzipContentEncoding contentEncoding) {
            Utils.checkNotNull(contentEncoding, "contentEncoding");
            this.contentEncoding = Optional.ofNullable(contentEncoding);
            return this;
        }

        /**
         * Indicates that the request body is gzip encoded
         */
        public Builder contentEncoding(Optional<? extends GzipContentEncoding> contentEncoding) {
            Utils.checkNotNull(contentEncoding, "contentEncoding");
            this.contentEncoding = contentEncoding;
            return this;
        }

        /**
         * If parameter is `true`, response will formatted for humans.
         */
        public Builder pretty(boolean pretty) {
            Utils.checkNotNull(pretty, "pretty");
            this.pretty = Optional.ofNullable(pretty);
            return this;
        }

        /**
         * If parameter is `true`, response will formatted for humans.
         */
        public Builder pretty(Optional<Boolean> pretty) {
            Utils.checkNotNull(pretty, "pretty");
            this.pretty = pretty;
            return this;
        }

        /**
         * Return query explanation in addition to result.
         */
        public Builder explain(Explain explain) {
            Utils.checkNotNull(explain, "explain");
            this.explain = Optional.ofNullable(explain);
            return this;
        }

        /**
         * Return query explanation in addition to result.
         */
        public Builder explain(Optional<? extends Explain> explain) {
            Utils.checkNotNull(explain, "explain");
            this.explain = explain;
            return this;
        }

        /**
         * Return query performance metrics in addition to result.
         */
        public Builder metrics(boolean metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = Optional.ofNullable(metrics);
            return this;
        }

        /**
         * Return query performance metrics in addition to result.
         */
        public Builder metrics(Optional<Boolean> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = metrics;
            return this;
        }

        /**
         * Instrument query evaluation and return a superset of performance metrics in addition to result.
         */
        public Builder instrument(boolean instrument) {
            Utils.checkNotNull(instrument, "instrument");
            this.instrument = Optional.ofNullable(instrument);
            return this;
        }

        /**
         * Instrument query evaluation and return a superset of performance metrics in addition to result.
         */
        public Builder instrument(Optional<Boolean> instrument) {
            Utils.checkNotNull(instrument, "instrument");
            this.instrument = instrument;
            return this;
        }

        /**
         * The query, input, and other settings for partial evaluation.
         */
        public Builder requestBody(CompileQueryWithPartialEvaluationRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public CompileQueryWithPartialEvaluationRequest build() {
            if (path == null) {
                path = _SINGLETON_VALUE_Path.value();
            }
            return new CompileQueryWithPartialEvaluationRequest(
                path,
                acceptEncoding,
                contentEncoding,
                pretty,
                explain,
                metrics,
                instrument,
                requestBody);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Path =
                new LazySingletonValue<>(
                        "path",
                        "\"\"",
                        new TypeReference<String>() {});
    }
}
