/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * CompileOptions
 * 
 * <p>Additional options to use during partial evaluation. Only the disableInlining option is currently supported in OPA. Enterprise OPA may support additional options.
 */
public class CompileOptions {

    /**
     * A list of paths to exclude from partial evaluation inlining.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableInlining")
    private Optional<? extends List<String>> disableInlining;

    /**
     * The output targets for partial evaluation. Different targets will have different constraints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDialects")
    private Optional<? extends List<TargetDialects>> targetDialects;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetSQLTableMappings")
    private Optional<? extends TargetSQLTableMappings> targetSQLTableMappings;

    /**
     * The Rego rule to evaluate for generating column masks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maskRule")
    private Optional<String> maskRule;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public CompileOptions(
            @JsonProperty("disableInlining") Optional<? extends List<String>> disableInlining,
            @JsonProperty("targetDialects") Optional<? extends List<TargetDialects>> targetDialects,
            @JsonProperty("targetSQLTableMappings") Optional<? extends TargetSQLTableMappings> targetSQLTableMappings,
            @JsonProperty("maskRule") Optional<String> maskRule) {
        Utils.checkNotNull(disableInlining, "disableInlining");
        Utils.checkNotNull(targetDialects, "targetDialects");
        Utils.checkNotNull(targetSQLTableMappings, "targetSQLTableMappings");
        Utils.checkNotNull(maskRule, "maskRule");
        this.disableInlining = disableInlining;
        this.targetDialects = targetDialects;
        this.targetSQLTableMappings = targetSQLTableMappings;
        this.maskRule = maskRule;
        this.additionalProperties = new HashMap<>();
    }
    
    public CompileOptions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A list of paths to exclude from partial evaluation inlining.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> disableInlining() {
        return (Optional<List<String>>) disableInlining;
    }

    /**
     * The output targets for partial evaluation. Different targets will have different constraints.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TargetDialects>> targetDialects() {
        return (Optional<List<TargetDialects>>) targetDialects;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TargetSQLTableMappings> targetSQLTableMappings() {
        return (Optional<TargetSQLTableMappings>) targetSQLTableMappings;
    }

    /**
     * The Rego rule to evaluate for generating column masks.
     */
    @JsonIgnore
    public Optional<String> maskRule() {
        return maskRule;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of paths to exclude from partial evaluation inlining.
     */
    public CompileOptions withDisableInlining(List<String> disableInlining) {
        Utils.checkNotNull(disableInlining, "disableInlining");
        this.disableInlining = Optional.ofNullable(disableInlining);
        return this;
    }

    /**
     * A list of paths to exclude from partial evaluation inlining.
     */
    public CompileOptions withDisableInlining(Optional<? extends List<String>> disableInlining) {
        Utils.checkNotNull(disableInlining, "disableInlining");
        this.disableInlining = disableInlining;
        return this;
    }

    /**
     * The output targets for partial evaluation. Different targets will have different constraints.
     */
    public CompileOptions withTargetDialects(List<TargetDialects> targetDialects) {
        Utils.checkNotNull(targetDialects, "targetDialects");
        this.targetDialects = Optional.ofNullable(targetDialects);
        return this;
    }

    /**
     * The output targets for partial evaluation. Different targets will have different constraints.
     */
    public CompileOptions withTargetDialects(Optional<? extends List<TargetDialects>> targetDialects) {
        Utils.checkNotNull(targetDialects, "targetDialects");
        this.targetDialects = targetDialects;
        return this;
    }

    public CompileOptions withTargetSQLTableMappings(TargetSQLTableMappings targetSQLTableMappings) {
        Utils.checkNotNull(targetSQLTableMappings, "targetSQLTableMappings");
        this.targetSQLTableMappings = Optional.ofNullable(targetSQLTableMappings);
        return this;
    }

    public CompileOptions withTargetSQLTableMappings(Optional<? extends TargetSQLTableMappings> targetSQLTableMappings) {
        Utils.checkNotNull(targetSQLTableMappings, "targetSQLTableMappings");
        this.targetSQLTableMappings = targetSQLTableMappings;
        return this;
    }

    /**
     * The Rego rule to evaluate for generating column masks.
     */
    public CompileOptions withMaskRule(String maskRule) {
        Utils.checkNotNull(maskRule, "maskRule");
        this.maskRule = Optional.ofNullable(maskRule);
        return this;
    }

    /**
     * The Rego rule to evaluate for generating column masks.
     */
    public CompileOptions withMaskRule(Optional<String> maskRule) {
        Utils.checkNotNull(maskRule, "maskRule");
        this.maskRule = maskRule;
        return this;
    }

    @JsonAnySetter
    public CompileOptions withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public CompileOptions withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompileOptions other = (CompileOptions) o;
        return 
            Objects.deepEquals(this.disableInlining, other.disableInlining) &&
            Objects.deepEquals(this.targetDialects, other.targetDialects) &&
            Objects.deepEquals(this.targetSQLTableMappings, other.targetSQLTableMappings) &&
            Objects.deepEquals(this.maskRule, other.maskRule) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            disableInlining,
            targetDialects,
            targetSQLTableMappings,
            maskRule,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompileOptions.class,
                "disableInlining", disableInlining,
                "targetDialects", targetDialects,
                "targetSQLTableMappings", targetSQLTableMappings,
                "maskRule", maskRule,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> disableInlining = Optional.empty();
 
        private Optional<? extends List<TargetDialects>> targetDialects = Optional.empty();
 
        private Optional<? extends TargetSQLTableMappings> targetSQLTableMappings = Optional.empty();
 
        private Optional<String> maskRule = Optional.empty();
 
        private Map<String, Object> additionalProperties = new HashMap<>();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of paths to exclude from partial evaluation inlining.
         */
        public Builder disableInlining(List<String> disableInlining) {
            Utils.checkNotNull(disableInlining, "disableInlining");
            this.disableInlining = Optional.ofNullable(disableInlining);
            return this;
        }

        /**
         * A list of paths to exclude from partial evaluation inlining.
         */
        public Builder disableInlining(Optional<? extends List<String>> disableInlining) {
            Utils.checkNotNull(disableInlining, "disableInlining");
            this.disableInlining = disableInlining;
            return this;
        }

        /**
         * The output targets for partial evaluation. Different targets will have different constraints.
         */
        public Builder targetDialects(List<TargetDialects> targetDialects) {
            Utils.checkNotNull(targetDialects, "targetDialects");
            this.targetDialects = Optional.ofNullable(targetDialects);
            return this;
        }

        /**
         * The output targets for partial evaluation. Different targets will have different constraints.
         */
        public Builder targetDialects(Optional<? extends List<TargetDialects>> targetDialects) {
            Utils.checkNotNull(targetDialects, "targetDialects");
            this.targetDialects = targetDialects;
            return this;
        }

        public Builder targetSQLTableMappings(TargetSQLTableMappings targetSQLTableMappings) {
            Utils.checkNotNull(targetSQLTableMappings, "targetSQLTableMappings");
            this.targetSQLTableMappings = Optional.ofNullable(targetSQLTableMappings);
            return this;
        }

        public Builder targetSQLTableMappings(Optional<? extends TargetSQLTableMappings> targetSQLTableMappings) {
            Utils.checkNotNull(targetSQLTableMappings, "targetSQLTableMappings");
            this.targetSQLTableMappings = targetSQLTableMappings;
            return this;
        }

        /**
         * The Rego rule to evaluate for generating column masks.
         */
        public Builder maskRule(String maskRule) {
            Utils.checkNotNull(maskRule, "maskRule");
            this.maskRule = Optional.ofNullable(maskRule);
            return this;
        }

        /**
         * The Rego rule to evaluate for generating column masks.
         */
        public Builder maskRule(Optional<String> maskRule) {
            Utils.checkNotNull(maskRule, "maskRule");
            this.maskRule = maskRule;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public CompileOptions build() {
            return new CompileOptions(
                disableInlining,
                targetDialects,
                targetSQLTableMappings,
                maskRule)
                .withAdditionalProperties(additionalProperties);
        }
    }
}
