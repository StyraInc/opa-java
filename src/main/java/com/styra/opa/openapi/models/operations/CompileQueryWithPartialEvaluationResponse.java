/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.styra.opa.openapi.models.shared.CompileResultJSON;
import com.styra.opa.openapi.models.shared.CompileResultMultitarget;
import com.styra.opa.openapi.models.shared.CompileResultSQL;
import com.styra.opa.openapi.models.shared.CompileResultUCAST;
import com.styra.opa.openapi.utils.Response;
import com.styra.opa.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.Objects;
import java.util.Optional;

public class CompileQueryWithPartialEvaluationResponse implements Response {

    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<InputStream> rawResponse;

    /**
     * Successful response
     */
    private Optional<? extends CompileResultJSON> compileResultJSON;

    /**
     * Successful response
     */
    private Optional<? extends CompileResultMultitarget> compileResultMultitarget;

    /**
     * Successful response
     */
    private Optional<? extends CompileResultUCAST> compileResultUCAST;

    /**
     * Successful response
     */
    private Optional<? extends CompileResultSQL> compileResultSQL;

    @JsonCreator
    public CompileQueryWithPartialEvaluationResponse(
            String contentType,
            int statusCode,
            HttpResponse<InputStream> rawResponse,
            Optional<? extends CompileResultJSON> compileResultJSON,
            Optional<? extends CompileResultMultitarget> compileResultMultitarget,
            Optional<? extends CompileResultUCAST> compileResultUCAST,
            Optional<? extends CompileResultSQL> compileResultSQL) {
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(rawResponse, "rawResponse");
        Utils.checkNotNull(compileResultJSON, "compileResultJSON");
        Utils.checkNotNull(compileResultMultitarget, "compileResultMultitarget");
        Utils.checkNotNull(compileResultUCAST, "compileResultUCAST");
        Utils.checkNotNull(compileResultSQL, "compileResultSQL");
        this.contentType = contentType;
        this.statusCode = statusCode;
        this.rawResponse = rawResponse;
        this.compileResultJSON = compileResultJSON;
        this.compileResultMultitarget = compileResultMultitarget;
        this.compileResultUCAST = compileResultUCAST;
        this.compileResultSQL = compileResultSQL;
    }
    
    public CompileQueryWithPartialEvaluationResponse(
            String contentType,
            int statusCode,
            HttpResponse<InputStream> rawResponse) {
        this(contentType, statusCode, rawResponse, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * HTTP response content type for this operation
     */
    @JsonIgnore
    public String contentType() {
        return contentType;
    }

    /**
     * HTTP response status code for this operation
     */
    @JsonIgnore
    public int statusCode() {
        return statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonIgnore
    public HttpResponse<InputStream> rawResponse() {
        return rawResponse;
    }

    /**
     * Successful response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompileResultJSON> compileResultJSON() {
        return (Optional<CompileResultJSON>) compileResultJSON;
    }

    /**
     * Successful response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompileResultMultitarget> compileResultMultitarget() {
        return (Optional<CompileResultMultitarget>) compileResultMultitarget;
    }

    /**
     * Successful response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompileResultUCAST> compileResultUCAST() {
        return (Optional<CompileResultUCAST>) compileResultUCAST;
    }

    /**
     * Successful response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompileResultSQL> compileResultSQL() {
        return (Optional<CompileResultSQL>) compileResultSQL;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * HTTP response content type for this operation
     */
    public CompileQueryWithPartialEvaluationResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    /**
     * HTTP response status code for this operation
     */
    public CompileQueryWithPartialEvaluationResponse withStatusCode(int statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public CompileQueryWithPartialEvaluationResponse withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultJSON(CompileResultJSON compileResultJSON) {
        Utils.checkNotNull(compileResultJSON, "compileResultJSON");
        this.compileResultJSON = Optional.ofNullable(compileResultJSON);
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultJSON(Optional<? extends CompileResultJSON> compileResultJSON) {
        Utils.checkNotNull(compileResultJSON, "compileResultJSON");
        this.compileResultJSON = compileResultJSON;
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultMultitarget(CompileResultMultitarget compileResultMultitarget) {
        Utils.checkNotNull(compileResultMultitarget, "compileResultMultitarget");
        this.compileResultMultitarget = Optional.ofNullable(compileResultMultitarget);
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultMultitarget(Optional<? extends CompileResultMultitarget> compileResultMultitarget) {
        Utils.checkNotNull(compileResultMultitarget, "compileResultMultitarget");
        this.compileResultMultitarget = compileResultMultitarget;
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultUCAST(CompileResultUCAST compileResultUCAST) {
        Utils.checkNotNull(compileResultUCAST, "compileResultUCAST");
        this.compileResultUCAST = Optional.ofNullable(compileResultUCAST);
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultUCAST(Optional<? extends CompileResultUCAST> compileResultUCAST) {
        Utils.checkNotNull(compileResultUCAST, "compileResultUCAST");
        this.compileResultUCAST = compileResultUCAST;
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultSQL(CompileResultSQL compileResultSQL) {
        Utils.checkNotNull(compileResultSQL, "compileResultSQL");
        this.compileResultSQL = Optional.ofNullable(compileResultSQL);
        return this;
    }

    /**
     * Successful response
     */
    public CompileQueryWithPartialEvaluationResponse withCompileResultSQL(Optional<? extends CompileResultSQL> compileResultSQL) {
        Utils.checkNotNull(compileResultSQL, "compileResultSQL");
        this.compileResultSQL = compileResultSQL;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompileQueryWithPartialEvaluationResponse other = (CompileQueryWithPartialEvaluationResponse) o;
        return 
            Objects.deepEquals(this.contentType, other.contentType) &&
            Objects.deepEquals(this.statusCode, other.statusCode) &&
            Objects.deepEquals(this.rawResponse, other.rawResponse) &&
            Objects.deepEquals(this.compileResultJSON, other.compileResultJSON) &&
            Objects.deepEquals(this.compileResultMultitarget, other.compileResultMultitarget) &&
            Objects.deepEquals(this.compileResultUCAST, other.compileResultUCAST) &&
            Objects.deepEquals(this.compileResultSQL, other.compileResultSQL);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contentType,
            statusCode,
            rawResponse,
            compileResultJSON,
            compileResultMultitarget,
            compileResultUCAST,
            compileResultSQL);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompileQueryWithPartialEvaluationResponse.class,
                "contentType", contentType,
                "statusCode", statusCode,
                "rawResponse", rawResponse,
                "compileResultJSON", compileResultJSON,
                "compileResultMultitarget", compileResultMultitarget,
                "compileResultUCAST", compileResultUCAST,
                "compileResultSQL", compileResultSQL);
    }
    
    public final static class Builder {
 
        private String contentType;
 
        private Integer statusCode;
 
        private HttpResponse<InputStream> rawResponse;
 
        private Optional<? extends CompileResultJSON> compileResultJSON = Optional.empty();
 
        private Optional<? extends CompileResultMultitarget> compileResultMultitarget = Optional.empty();
 
        private Optional<? extends CompileResultUCAST> compileResultUCAST = Optional.empty();
 
        private Optional<? extends CompileResultSQL> compileResultSQL = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultJSON(CompileResultJSON compileResultJSON) {
            Utils.checkNotNull(compileResultJSON, "compileResultJSON");
            this.compileResultJSON = Optional.ofNullable(compileResultJSON);
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultJSON(Optional<? extends CompileResultJSON> compileResultJSON) {
            Utils.checkNotNull(compileResultJSON, "compileResultJSON");
            this.compileResultJSON = compileResultJSON;
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultMultitarget(CompileResultMultitarget compileResultMultitarget) {
            Utils.checkNotNull(compileResultMultitarget, "compileResultMultitarget");
            this.compileResultMultitarget = Optional.ofNullable(compileResultMultitarget);
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultMultitarget(Optional<? extends CompileResultMultitarget> compileResultMultitarget) {
            Utils.checkNotNull(compileResultMultitarget, "compileResultMultitarget");
            this.compileResultMultitarget = compileResultMultitarget;
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultUCAST(CompileResultUCAST compileResultUCAST) {
            Utils.checkNotNull(compileResultUCAST, "compileResultUCAST");
            this.compileResultUCAST = Optional.ofNullable(compileResultUCAST);
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultUCAST(Optional<? extends CompileResultUCAST> compileResultUCAST) {
            Utils.checkNotNull(compileResultUCAST, "compileResultUCAST");
            this.compileResultUCAST = compileResultUCAST;
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultSQL(CompileResultSQL compileResultSQL) {
            Utils.checkNotNull(compileResultSQL, "compileResultSQL");
            this.compileResultSQL = Optional.ofNullable(compileResultSQL);
            return this;
        }

        /**
         * Successful response
         */
        public Builder compileResultSQL(Optional<? extends CompileResultSQL> compileResultSQL) {
            Utils.checkNotNull(compileResultSQL, "compileResultSQL");
            this.compileResultSQL = compileResultSQL;
            return this;
        }
        
        public CompileQueryWithPartialEvaluationResponse build() {
            return new CompileQueryWithPartialEvaluationResponse(
                contentType,
                statusCode,
                rawResponse,
                compileResultJSON,
                compileResultMultitarget,
                compileResultUCAST,
                compileResultSQL);
        }
    }
}
