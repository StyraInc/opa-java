/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * CompileResultSQLResult
 * 
 * <p>The partially evaluated result of the query as SQL.
 */
public class CompileResultSQLResult {

    /**
     * String representing the SQL equivalent of the conditions under which the query is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    /**
     * Column masking functions, where the key is the column name, and the value describes which masking function to use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("masks")
    private Optional<? extends Map<String, Map<String, MaskingRule>>> masks;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public CompileResultSQLResult(
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("masks") Optional<? extends Map<String, Map<String, MaskingRule>>> masks) {
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(masks, "masks");
        this.query = query;
        this.masks = masks;
        this.additionalProperties = new HashMap<>();
    }
    
    public CompileResultSQLResult() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * String representing the SQL equivalent of the conditions under which the query is true.
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Column masking functions, where the key is the column name, and the value describes which masking function to use.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Map<String, MaskingRule>>> masks() {
        return (Optional<Map<String, Map<String, MaskingRule>>>) masks;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * String representing the SQL equivalent of the conditions under which the query is true.
     */
    public CompileResultSQLResult withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * String representing the SQL equivalent of the conditions under which the query is true.
     */
    public CompileResultSQLResult withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Column masking functions, where the key is the column name, and the value describes which masking function to use.
     */
    public CompileResultSQLResult withMasks(Map<String, Map<String, MaskingRule>> masks) {
        Utils.checkNotNull(masks, "masks");
        this.masks = Optional.ofNullable(masks);
        return this;
    }

    /**
     * Column masking functions, where the key is the column name, and the value describes which masking function to use.
     */
    public CompileResultSQLResult withMasks(Optional<? extends Map<String, Map<String, MaskingRule>>> masks) {
        Utils.checkNotNull(masks, "masks");
        this.masks = masks;
        return this;
    }

    @JsonAnySetter
    public CompileResultSQLResult withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public CompileResultSQLResult withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompileResultSQLResult other = (CompileResultSQLResult) o;
        return 
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.masks, other.masks) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            query,
            masks,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompileResultSQLResult.class,
                "query", query,
                "masks", masks,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private Optional<String> query = Optional.empty();
 
        private Optional<? extends Map<String, Map<String, MaskingRule>>> masks = Optional.empty();
 
        private Map<String, Object> additionalProperties = new HashMap<>();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String representing the SQL equivalent of the conditions under which the query is true.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * String representing the SQL equivalent of the conditions under which the query is true.
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Column masking functions, where the key is the column name, and the value describes which masking function to use.
         */
        public Builder masks(Map<String, Map<String, MaskingRule>> masks) {
            Utils.checkNotNull(masks, "masks");
            this.masks = Optional.ofNullable(masks);
            return this;
        }

        /**
         * Column masking functions, where the key is the column name, and the value describes which masking function to use.
         */
        public Builder masks(Optional<? extends Map<String, Map<String, MaskingRule>>> masks) {
            Utils.checkNotNull(masks, "masks");
            this.masks = masks;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public CompileResultSQLResult build() {
            return new CompileResultSQLResult(
                query,
                masks)
                .withAdditionalProperties(additionalProperties);
        }
    }
}
