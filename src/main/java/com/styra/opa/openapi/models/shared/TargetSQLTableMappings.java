/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class TargetSQLTableMappings {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlserver")
    private Optional<? extends Map<String, Object>> sqlserver;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mysql")
    private Optional<? extends Map<String, Object>> mysql;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postgresql")
    private Optional<? extends Map<String, Object>> postgresql;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlite")
    private Optional<? extends Map<String, Object>> sqlite;

    @JsonCreator
    public TargetSQLTableMappings(
            @JsonProperty("sqlserver") Optional<? extends Map<String, Object>> sqlserver,
            @JsonProperty("mysql") Optional<? extends Map<String, Object>> mysql,
            @JsonProperty("postgresql") Optional<? extends Map<String, Object>> postgresql,
            @JsonProperty("sqlite") Optional<? extends Map<String, Object>> sqlite) {
        Utils.checkNotNull(sqlserver, "sqlserver");
        Utils.checkNotNull(mysql, "mysql");
        Utils.checkNotNull(postgresql, "postgresql");
        Utils.checkNotNull(sqlite, "sqlite");
        this.sqlserver = sqlserver;
        this.mysql = mysql;
        this.postgresql = postgresql;
        this.sqlite = sqlite;
    }
    
    public TargetSQLTableMappings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> sqlserver() {
        return (Optional<Map<String, Object>>) sqlserver;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> mysql() {
        return (Optional<Map<String, Object>>) mysql;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> postgresql() {
        return (Optional<Map<String, Object>>) postgresql;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> sqlite() {
        return (Optional<Map<String, Object>>) sqlite;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public TargetSQLTableMappings withSqlserver(Map<String, Object> sqlserver) {
        Utils.checkNotNull(sqlserver, "sqlserver");
        this.sqlserver = Optional.ofNullable(sqlserver);
        return this;
    }

    public TargetSQLTableMappings withSqlserver(Optional<? extends Map<String, Object>> sqlserver) {
        Utils.checkNotNull(sqlserver, "sqlserver");
        this.sqlserver = sqlserver;
        return this;
    }

    public TargetSQLTableMappings withMysql(Map<String, Object> mysql) {
        Utils.checkNotNull(mysql, "mysql");
        this.mysql = Optional.ofNullable(mysql);
        return this;
    }

    public TargetSQLTableMappings withMysql(Optional<? extends Map<String, Object>> mysql) {
        Utils.checkNotNull(mysql, "mysql");
        this.mysql = mysql;
        return this;
    }

    public TargetSQLTableMappings withPostgresql(Map<String, Object> postgresql) {
        Utils.checkNotNull(postgresql, "postgresql");
        this.postgresql = Optional.ofNullable(postgresql);
        return this;
    }

    public TargetSQLTableMappings withPostgresql(Optional<? extends Map<String, Object>> postgresql) {
        Utils.checkNotNull(postgresql, "postgresql");
        this.postgresql = postgresql;
        return this;
    }

    public TargetSQLTableMappings withSqlite(Map<String, Object> sqlite) {
        Utils.checkNotNull(sqlite, "sqlite");
        this.sqlite = Optional.ofNullable(sqlite);
        return this;
    }

    public TargetSQLTableMappings withSqlite(Optional<? extends Map<String, Object>> sqlite) {
        Utils.checkNotNull(sqlite, "sqlite");
        this.sqlite = sqlite;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetSQLTableMappings other = (TargetSQLTableMappings) o;
        return 
            Objects.deepEquals(this.sqlserver, other.sqlserver) &&
            Objects.deepEquals(this.mysql, other.mysql) &&
            Objects.deepEquals(this.postgresql, other.postgresql) &&
            Objects.deepEquals(this.sqlite, other.sqlite);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sqlserver,
            mysql,
            postgresql,
            sqlite);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetSQLTableMappings.class,
                "sqlserver", sqlserver,
                "mysql", mysql,
                "postgresql", postgresql,
                "sqlite", sqlite);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, Object>> sqlserver = Optional.empty();
 
        private Optional<? extends Map<String, Object>> mysql = Optional.empty();
 
        private Optional<? extends Map<String, Object>> postgresql = Optional.empty();
 
        private Optional<? extends Map<String, Object>> sqlite = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sqlserver(Map<String, Object> sqlserver) {
            Utils.checkNotNull(sqlserver, "sqlserver");
            this.sqlserver = Optional.ofNullable(sqlserver);
            return this;
        }

        public Builder sqlserver(Optional<? extends Map<String, Object>> sqlserver) {
            Utils.checkNotNull(sqlserver, "sqlserver");
            this.sqlserver = sqlserver;
            return this;
        }

        public Builder mysql(Map<String, Object> mysql) {
            Utils.checkNotNull(mysql, "mysql");
            this.mysql = Optional.ofNullable(mysql);
            return this;
        }

        public Builder mysql(Optional<? extends Map<String, Object>> mysql) {
            Utils.checkNotNull(mysql, "mysql");
            this.mysql = mysql;
            return this;
        }

        public Builder postgresql(Map<String, Object> postgresql) {
            Utils.checkNotNull(postgresql, "postgresql");
            this.postgresql = Optional.ofNullable(postgresql);
            return this;
        }

        public Builder postgresql(Optional<? extends Map<String, Object>> postgresql) {
            Utils.checkNotNull(postgresql, "postgresql");
            this.postgresql = postgresql;
            return this;
        }

        public Builder sqlite(Map<String, Object> sqlite) {
            Utils.checkNotNull(sqlite, "sqlite");
            this.sqlite = Optional.ofNullable(sqlite);
            return this;
        }

        public Builder sqlite(Optional<? extends Map<String, Object>> sqlite) {
            Utils.checkNotNull(sqlite, "sqlite");
            this.sqlite = sqlite;
            return this;
        }
        
        public TargetSQLTableMappings build() {
            return new TargetSQLTableMappings(
                sqlserver,
                mysql,
                postgresql,
                sqlite);
        }
    }
}
