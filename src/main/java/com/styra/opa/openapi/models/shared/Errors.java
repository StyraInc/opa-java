/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.openapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Errors {

    @JsonProperty("code")
    private String code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<? extends Location> location;

    @JsonProperty("message")
    private String message;

    @JsonCreator
    public Errors(
            @JsonProperty("code") String code,
            @JsonProperty("location") Optional<? extends Location> location,
            @JsonProperty("message") String message) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(message, "message");
        this.code = code;
        this.location = location;
        this.message = message;
    }
    
    public Errors(
            String code,
            String message) {
        this(code, Optional.empty(), message);
    }

    @JsonIgnore
    public String code() {
        return code;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Location> location() {
        return (Optional<Location>) location;
    }

    @JsonIgnore
    public String message() {
        return message;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Errors withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public Errors withLocation(Location location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    public Errors withLocation(Optional<? extends Location> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public Errors withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Errors other = (Errors) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.location, other.location) &&
            java.util.Objects.deepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            location,
            message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Errors.class,
                "code", code,
                "location", location,
                "message", message);
    }
    
    public final static class Builder {
 
        private String code;
 
        private Optional<? extends Location> location = Optional.empty();
 
        private String message;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder location(Location location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<? extends Location> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }
        
        public Errors build() {
            return new Errors(
                code,
                location,
                message);
        }
    }
}

