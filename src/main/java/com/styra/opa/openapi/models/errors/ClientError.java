/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ClientError
 * 
 * <p>Bad Request
 */
@SuppressWarnings("serial")
public class ClientError extends RuntimeException {

    @JsonProperty("code")
    private String code;

    @JsonProperty("message")
    private String message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<Errors>> errors;

    @JsonCreator
    public ClientError(
            @JsonProperty("code") String code,
            @JsonProperty("message") String message,
            @JsonProperty("errors") Optional<? extends List<Errors>> errors) {
        super(message);
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(errors, "errors");
        this.code = code;
        this.message = message;
        this.errors = errors;
    }
    
    public ClientError(
            String code,
            String message) {
        this(code, message, Optional.empty());
    }

    @JsonIgnore
    public String code() {
        return code;
    }

    @JsonIgnore
    public String message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Errors>> errors() {
        return (Optional<List<Errors>>) errors;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ClientError withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public ClientError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public ClientError withErrors(List<Errors> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    public ClientError withErrors(Optional<? extends List<Errors>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientError other = (ClientError) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            message,
            errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientError.class,
                "code", code,
                "message", message,
                "errors", errors);
    }
    
    public final static class Builder {
 
        private String code;
 
        private String message;
 
        private Optional<? extends List<Errors>> errors = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder errors(List<Errors> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public Builder errors(Optional<? extends List<Errors>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }
        
        public ClientError build() {
            return new ClientError(
                code,
                message,
                errors);
        }
    }
}

