/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class One {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replace")
    private Optional<? extends Replace> replace;

    @JsonCreator
    public One(
            @JsonProperty("replace") Optional<? extends Replace> replace) {
        Utils.checkNotNull(replace, "replace");
        this.replace = replace;
    }
    
    public One() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Replace> replace() {
        return (Optional<Replace>) replace;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public One withReplace(Replace replace) {
        Utils.checkNotNull(replace, "replace");
        this.replace = Optional.ofNullable(replace);
        return this;
    }

    public One withReplace(Optional<? extends Replace> replace) {
        Utils.checkNotNull(replace, "replace");
        this.replace = replace;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        One other = (One) o;
        return 
            Objects.deepEquals(this.replace, other.replace);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            replace);
    }
    
    @Override
    public String toString() {
        return Utils.toString(One.class,
                "replace", replace);
    }
    
    public final static class Builder {
 
        private Optional<? extends Replace> replace = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder replace(Replace replace) {
            Utils.checkNotNull(replace, "replace");
            this.replace = Optional.ofNullable(replace);
            return this;
        }

        public Builder replace(Optional<? extends Replace> replace) {
            Utils.checkNotNull(replace, "replace");
            this.replace = replace;
            return this;
        }
        
        public One build() {
            return new One(
                replace);
        }
    }
}
