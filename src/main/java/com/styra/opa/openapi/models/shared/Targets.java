/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class Targets {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ucast")
    private Optional<? extends Ucast> ucast;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlserver")
    private Optional<? extends Sqlserver> sqlserver;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mysql")
    private Optional<? extends Mysql> mysql;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postgresql")
    private Optional<? extends Postgresql> postgresql;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqlite")
    private Optional<? extends Sqlite> sqlite;

    @JsonCreator
    public Targets(
            @JsonProperty("ucast") Optional<? extends Ucast> ucast,
            @JsonProperty("sqlserver") Optional<? extends Sqlserver> sqlserver,
            @JsonProperty("mysql") Optional<? extends Mysql> mysql,
            @JsonProperty("postgresql") Optional<? extends Postgresql> postgresql,
            @JsonProperty("sqlite") Optional<? extends Sqlite> sqlite) {
        Utils.checkNotNull(ucast, "ucast");
        Utils.checkNotNull(sqlserver, "sqlserver");
        Utils.checkNotNull(mysql, "mysql");
        Utils.checkNotNull(postgresql, "postgresql");
        Utils.checkNotNull(sqlite, "sqlite");
        this.ucast = ucast;
        this.sqlserver = sqlserver;
        this.mysql = mysql;
        this.postgresql = postgresql;
        this.sqlite = sqlite;
    }
    
    public Targets() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Ucast> ucast() {
        return (Optional<Ucast>) ucast;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Sqlserver> sqlserver() {
        return (Optional<Sqlserver>) sqlserver;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mysql> mysql() {
        return (Optional<Mysql>) mysql;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Postgresql> postgresql() {
        return (Optional<Postgresql>) postgresql;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Sqlite> sqlite() {
        return (Optional<Sqlite>) sqlite;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Targets withUcast(Ucast ucast) {
        Utils.checkNotNull(ucast, "ucast");
        this.ucast = Optional.ofNullable(ucast);
        return this;
    }

    public Targets withUcast(Optional<? extends Ucast> ucast) {
        Utils.checkNotNull(ucast, "ucast");
        this.ucast = ucast;
        return this;
    }

    public Targets withSqlserver(Sqlserver sqlserver) {
        Utils.checkNotNull(sqlserver, "sqlserver");
        this.sqlserver = Optional.ofNullable(sqlserver);
        return this;
    }

    public Targets withSqlserver(Optional<? extends Sqlserver> sqlserver) {
        Utils.checkNotNull(sqlserver, "sqlserver");
        this.sqlserver = sqlserver;
        return this;
    }

    public Targets withMysql(Mysql mysql) {
        Utils.checkNotNull(mysql, "mysql");
        this.mysql = Optional.ofNullable(mysql);
        return this;
    }

    public Targets withMysql(Optional<? extends Mysql> mysql) {
        Utils.checkNotNull(mysql, "mysql");
        this.mysql = mysql;
        return this;
    }

    public Targets withPostgresql(Postgresql postgresql) {
        Utils.checkNotNull(postgresql, "postgresql");
        this.postgresql = Optional.ofNullable(postgresql);
        return this;
    }

    public Targets withPostgresql(Optional<? extends Postgresql> postgresql) {
        Utils.checkNotNull(postgresql, "postgresql");
        this.postgresql = postgresql;
        return this;
    }

    public Targets withSqlite(Sqlite sqlite) {
        Utils.checkNotNull(sqlite, "sqlite");
        this.sqlite = Optional.ofNullable(sqlite);
        return this;
    }

    public Targets withSqlite(Optional<? extends Sqlite> sqlite) {
        Utils.checkNotNull(sqlite, "sqlite");
        this.sqlite = sqlite;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Targets other = (Targets) o;
        return 
            Objects.deepEquals(this.ucast, other.ucast) &&
            Objects.deepEquals(this.sqlserver, other.sqlserver) &&
            Objects.deepEquals(this.mysql, other.mysql) &&
            Objects.deepEquals(this.postgresql, other.postgresql) &&
            Objects.deepEquals(this.sqlite, other.sqlite);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ucast,
            sqlserver,
            mysql,
            postgresql,
            sqlite);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Targets.class,
                "ucast", ucast,
                "sqlserver", sqlserver,
                "mysql", mysql,
                "postgresql", postgresql,
                "sqlite", sqlite);
    }
    
    public final static class Builder {
 
        private Optional<? extends Ucast> ucast = Optional.empty();
 
        private Optional<? extends Sqlserver> sqlserver = Optional.empty();
 
        private Optional<? extends Mysql> mysql = Optional.empty();
 
        private Optional<? extends Postgresql> postgresql = Optional.empty();
 
        private Optional<? extends Sqlite> sqlite = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ucast(Ucast ucast) {
            Utils.checkNotNull(ucast, "ucast");
            this.ucast = Optional.ofNullable(ucast);
            return this;
        }

        public Builder ucast(Optional<? extends Ucast> ucast) {
            Utils.checkNotNull(ucast, "ucast");
            this.ucast = ucast;
            return this;
        }

        public Builder sqlserver(Sqlserver sqlserver) {
            Utils.checkNotNull(sqlserver, "sqlserver");
            this.sqlserver = Optional.ofNullable(sqlserver);
            return this;
        }

        public Builder sqlserver(Optional<? extends Sqlserver> sqlserver) {
            Utils.checkNotNull(sqlserver, "sqlserver");
            this.sqlserver = sqlserver;
            return this;
        }

        public Builder mysql(Mysql mysql) {
            Utils.checkNotNull(mysql, "mysql");
            this.mysql = Optional.ofNullable(mysql);
            return this;
        }

        public Builder mysql(Optional<? extends Mysql> mysql) {
            Utils.checkNotNull(mysql, "mysql");
            this.mysql = mysql;
            return this;
        }

        public Builder postgresql(Postgresql postgresql) {
            Utils.checkNotNull(postgresql, "postgresql");
            this.postgresql = Optional.ofNullable(postgresql);
            return this;
        }

        public Builder postgresql(Optional<? extends Postgresql> postgresql) {
            Utils.checkNotNull(postgresql, "postgresql");
            this.postgresql = postgresql;
            return this;
        }

        public Builder sqlite(Sqlite sqlite) {
            Utils.checkNotNull(sqlite, "sqlite");
            this.sqlite = Optional.ofNullable(sqlite);
            return this;
        }

        public Builder sqlite(Optional<? extends Sqlite> sqlite) {
            Utils.checkNotNull(sqlite, "sqlite");
            this.sqlite = sqlite;
            return this;
        }
        
        public Targets build() {
            return new Targets(
                ucast,
                sqlserver,
                mysql,
                postgresql,
                sqlite);
        }
    }
}
