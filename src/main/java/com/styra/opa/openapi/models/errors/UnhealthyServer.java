/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * UnhealthyServer - OPA service is not healthy. If the bundles option is specified this can mean any of the configured bundles have not yet been activated. If the plugins option is specified then at least one plugin is in a non-OK state.
 */
public class UnhealthyServer extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    @JsonCreator
    public UnhealthyServer(
            @JsonProperty("code") Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
    }
    
    public UnhealthyServer() {
        this(Optional.empty());
    }

    public Optional<String> code(){
        return code;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public UnhealthyServer withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }
    
    public UnhealthyServer withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnhealthyServer other = (UnhealthyServer) o;
        return
            Objects.deepEquals(this.code, other.code);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code);
    }

    @Override
    public String toString() {
        return Utils.toString(UnhealthyServer.class,
                "code", code);
    }

    public final static class Builder {

        private Optional<String> code = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }
        
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public UnhealthyServer build() {
            return new UnhealthyServer(
                code);
        }
    }
}
