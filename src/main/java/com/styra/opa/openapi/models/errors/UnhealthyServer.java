/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.styra.opa.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * UnhealthyServer
 * 
 * <p>OPA service is not healthy. If the bundles option is specified this can mean any of the configured bundles have not yet been activated. If the plugins option is specified then at least one plugin is in a non-OK state.
 */
@SuppressWarnings("serial")
public class UnhealthyServer extends RuntimeException {

    @JsonProperty("code")
    private String code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonCreator
    public UnhealthyServer(
            @JsonProperty("code") String code,
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("message") Optional<String> message) {
        super(message.orElse(null));
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(message, "message");
        this.code = code;
        this.error = error;
        this.message = message;
    }
    
    public UnhealthyServer(
            String code) {
        this(code, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String code() {
        return code;
    }

    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UnhealthyServer withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public UnhealthyServer withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public UnhealthyServer withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public UnhealthyServer withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    public UnhealthyServer withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnhealthyServer other = (UnhealthyServer) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            error,
            message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnhealthyServer.class,
                "code", code,
                "error", error,
                "message", message);
    }
    
    public final static class Builder {
 
        private String code;
 
        private Optional<String> error = Optional.empty();
 
        private Optional<String> message = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }
        
        public UnhealthyServer build() {
            return new UnhealthyServer(
                code,
                error,
                message);
        }
    }
}

