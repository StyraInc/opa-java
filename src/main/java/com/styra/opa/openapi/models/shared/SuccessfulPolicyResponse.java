/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.styra.opa.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.openapi.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SuccessfulPolicyResponse - Success.
 * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
 * 
 */

public class SuccessfulPolicyResponse {

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    private Optional<? extends Result> result;

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metrics")
    private Optional<? extends Map<String, Object>> metrics;

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decision_id")
    private Optional<String> decisionId;

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provenance")
    private Optional<? extends Provenance> provenance;

    @JsonCreator
    public SuccessfulPolicyResponse(
            @JsonProperty("result") Optional<? extends Result> result,
            @JsonProperty("metrics") Optional<? extends Map<String, Object>> metrics,
            @JsonProperty("decision_id") Optional<String> decisionId,
            @JsonProperty("provenance") Optional<? extends Provenance> provenance) {
        Utils.checkNotNull(result, "result");
        Utils.checkNotNull(metrics, "metrics");
        Utils.checkNotNull(decisionId, "decisionId");
        Utils.checkNotNull(provenance, "provenance");
        this.result = result;
        this.metrics = metrics;
        this.decisionId = decisionId;
        this.provenance = provenance;
    }
    
    public SuccessfulPolicyResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Result> result() {
        return (Optional<Result>) result;
    }

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> metrics() {
        return (Optional<Map<String, Object>>) metrics;
    }

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    @JsonIgnore
    public Optional<String> decisionId() {
        return decisionId;
    }

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Provenance> provenance() {
        return (Optional<Provenance>) provenance;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    public SuccessfulPolicyResponse withResult(Result result) {
        Utils.checkNotNull(result, "result");
        this.result = Optional.ofNullable(result);
        return this;
    }

    /**
     * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
     */
    public SuccessfulPolicyResponse withResult(Optional<? extends Result> result) {
        Utils.checkNotNull(result, "result");
        this.result = result;
        return this;
    }

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    public SuccessfulPolicyResponse withMetrics(Map<String, Object> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = Optional.ofNullable(metrics);
        return this;
    }

    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    public SuccessfulPolicyResponse withMetrics(Optional<? extends Map<String, Object>> metrics) {
        Utils.checkNotNull(metrics, "metrics");
        this.metrics = metrics;
        return this;
    }

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    public SuccessfulPolicyResponse withDecisionId(String decisionId) {
        Utils.checkNotNull(decisionId, "decisionId");
        this.decisionId = Optional.ofNullable(decisionId);
        return this;
    }

    /**
     * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
     */
    public SuccessfulPolicyResponse withDecisionId(Optional<String> decisionId) {
        Utils.checkNotNull(decisionId, "decisionId");
        this.decisionId = decisionId;
        return this;
    }

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    public SuccessfulPolicyResponse withProvenance(Provenance provenance) {
        Utils.checkNotNull(provenance, "provenance");
        this.provenance = Optional.ofNullable(provenance);
        return this;
    }

    /**
     * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
     */
    public SuccessfulPolicyResponse withProvenance(Optional<? extends Provenance> provenance) {
        Utils.checkNotNull(provenance, "provenance");
        this.provenance = provenance;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuccessfulPolicyResponse other = (SuccessfulPolicyResponse) o;
        return 
            Objects.deepEquals(this.result, other.result) &&
            Objects.deepEquals(this.metrics, other.metrics) &&
            Objects.deepEquals(this.decisionId, other.decisionId) &&
            Objects.deepEquals(this.provenance, other.provenance);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            result,
            metrics,
            decisionId,
            provenance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuccessfulPolicyResponse.class,
                "result", result,
                "metrics", metrics,
                "decisionId", decisionId,
                "provenance", provenance);
    }
    
    public final static class Builder {
 
        private Optional<? extends Result> result = Optional.empty();
 
        private Optional<? extends Map<String, Object>> metrics = Optional.empty();
 
        private Optional<String> decisionId = Optional.empty();
 
        private Optional<? extends Provenance> provenance = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
         */
        public Builder result(Result result) {
            Utils.checkNotNull(result, "result");
            this.result = Optional.ofNullable(result);
            return this;
        }

        /**
         * The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
         */
        public Builder result(Optional<? extends Result> result) {
            Utils.checkNotNull(result, "result");
            this.result = result;
            return this;
        }

        /**
         * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
         */
        public Builder metrics(Map<String, Object> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = Optional.ofNullable(metrics);
            return this;
        }

        /**
         * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
         */
        public Builder metrics(Optional<? extends Map<String, Object>> metrics) {
            Utils.checkNotNull(metrics, "metrics");
            this.metrics = metrics;
            return this;
        }

        /**
         * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
         */
        public Builder decisionId(String decisionId) {
            Utils.checkNotNull(decisionId, "decisionId");
            this.decisionId = Optional.ofNullable(decisionId);
            return this;
        }

        /**
         * If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purposes.
         */
        public Builder decisionId(Optional<String> decisionId) {
            Utils.checkNotNull(decisionId, "decisionId");
            this.decisionId = decisionId;
            return this;
        }

        /**
         * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
         */
        public Builder provenance(Provenance provenance) {
            Utils.checkNotNull(provenance, "provenance");
            this.provenance = Optional.ofNullable(provenance);
            return this;
        }

        /**
         * Provenance information can be requested on individual API calls and are returned inline with the API response. To obtain provenance information on an API call, specify the `provenance=true` query parameter when executing the API call.
         */
        public Builder provenance(Optional<? extends Provenance> provenance) {
            Utils.checkNotNull(provenance, "provenance");
            this.provenance = provenance;
            return this;
        }
        
        public SuccessfulPolicyResponse build() {
            return new SuccessfulPolicyResponse(
                result,
                metrics,
                decisionId,
                provenance);
        }
    }
}

