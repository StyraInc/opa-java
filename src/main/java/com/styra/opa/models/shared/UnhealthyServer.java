/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UnhealthyServer {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends String> code;

    @JsonCreator
    public UnhealthyServer(
            @JsonProperty("code") Optional<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
    }
    
    public UnhealthyServer() {
        this(Optional.empty());
    }

    public Optional<? extends String> code() {
        return code;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UnhealthyServer withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    public UnhealthyServer withCode(Optional<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnhealthyServer other = (UnhealthyServer) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnhealthyServer.class,
                "code", code);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> code = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<? extends String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }
        
        public UnhealthyServer build() {
            return new UnhealthyServer(
                code);
        }
    }
}

