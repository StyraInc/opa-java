/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.utils.LazySingletonValue;
import com.styra.opa.utils.SpeakeasyMetadata;
import com.styra.opa.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class HealthRequest {

    /**
     * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bundles")
    private Optional<? extends Boolean> bundles;

    /**
     * Boolean parameter to account for plugin status in response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=plugins")
    private Optional<? extends Boolean> plugins;

    /**
     * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclude-plugin")
    private Optional<? extends java.util.List<String>> excludePlugin;

    public HealthRequest(
            Optional<? extends Boolean> bundles,
            Optional<? extends Boolean> plugins,
            Optional<? extends java.util.List<String>> excludePlugin) {
        Utils.checkNotNull(bundles, "bundles");
        Utils.checkNotNull(plugins, "plugins");
        Utils.checkNotNull(excludePlugin, "excludePlugin");
        this.bundles = bundles;
        this.plugins = plugins;
        this.excludePlugin = excludePlugin;
    }

    /**
     * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     */
    public Optional<? extends Boolean> bundles() {
        return bundles;
    }

    /**
     * Boolean parameter to account for plugin status in response.
     */
    public Optional<? extends Boolean> plugins() {
        return plugins;
    }

    /**
     * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     */
    public Optional<? extends java.util.List<String>> excludePlugin() {
        return excludePlugin;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     */
    public HealthRequest withBundles(boolean bundles) {
        Utils.checkNotNull(bundles, "bundles");
        this.bundles = Optional.ofNullable(bundles);
        return this;
    }

    /**
     * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     */
    public HealthRequest withBundles(Optional<? extends Boolean> bundles) {
        Utils.checkNotNull(bundles, "bundles");
        this.bundles = bundles;
        return this;
    }

    /**
     * Boolean parameter to account for plugin status in response.
     */
    public HealthRequest withPlugins(boolean plugins) {
        Utils.checkNotNull(plugins, "plugins");
        this.plugins = Optional.ofNullable(plugins);
        return this;
    }

    /**
     * Boolean parameter to account for plugin status in response.
     */
    public HealthRequest withPlugins(Optional<? extends Boolean> plugins) {
        Utils.checkNotNull(plugins, "plugins");
        this.plugins = plugins;
        return this;
    }

    /**
     * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     */
    public HealthRequest withExcludePlugin(java.util.List<String> excludePlugin) {
        Utils.checkNotNull(excludePlugin, "excludePlugin");
        this.excludePlugin = Optional.ofNullable(excludePlugin);
        return this;
    }

    /**
     * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     */
    public HealthRequest withExcludePlugin(Optional<? extends java.util.List<String>> excludePlugin) {
        Utils.checkNotNull(excludePlugin, "excludePlugin");
        this.excludePlugin = excludePlugin;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HealthRequest other = (HealthRequest) o;
        return 
            java.util.Objects.deepEquals(this.bundles, other.bundles) &&
            java.util.Objects.deepEquals(this.plugins, other.plugins) &&
            java.util.Objects.deepEquals(this.excludePlugin, other.excludePlugin);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bundles,
            plugins,
            excludePlugin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HealthRequest.class,
                "bundles", bundles,
                "plugins", plugins,
                "excludePlugin", excludePlugin);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> bundles;
 
        private Optional<? extends Boolean> plugins;
 
        private Optional<? extends java.util.List<String>> excludePlugin = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
         */
        public Builder bundles(boolean bundles) {
            Utils.checkNotNull(bundles, "bundles");
            this.bundles = Optional.ofNullable(bundles);
            return this;
        }

        /**
         * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
         */
        public Builder bundles(Optional<? extends Boolean> bundles) {
            Utils.checkNotNull(bundles, "bundles");
            this.bundles = bundles;
            return this;
        }

        /**
         * Boolean parameter to account for plugin status in response.
         */
        public Builder plugins(boolean plugins) {
            Utils.checkNotNull(plugins, "plugins");
            this.plugins = Optional.ofNullable(plugins);
            return this;
        }

        /**
         * Boolean parameter to account for plugin status in response.
         */
        public Builder plugins(Optional<? extends Boolean> plugins) {
            Utils.checkNotNull(plugins, "plugins");
            this.plugins = plugins;
            return this;
        }

        /**
         * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
         */
        public Builder excludePlugin(java.util.List<String> excludePlugin) {
            Utils.checkNotNull(excludePlugin, "excludePlugin");
            this.excludePlugin = Optional.ofNullable(excludePlugin);
            return this;
        }

        /**
         * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
         */
        public Builder excludePlugin(Optional<? extends java.util.List<String>> excludePlugin) {
            Utils.checkNotNull(excludePlugin, "excludePlugin");
            this.excludePlugin = excludePlugin;
            return this;
        }
        
        public HealthRequest build() {
            if (bundles == null) {
                bundles = _SINGLETON_VALUE_Bundles.value();
            }
            if (plugins == null) {
                plugins = _SINGLETON_VALUE_Plugins.value();
            }
            return new HealthRequest(
                bundles,
                plugins,
                excludePlugin);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Bundles =
                new LazySingletonValue<>(
                        "bundles",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Plugins =
                new LazySingletonValue<>(
                        "plugins",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

