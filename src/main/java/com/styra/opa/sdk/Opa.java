/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa.sdk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.styra.opa.sdk.models.errors.SDKError;
import com.styra.opa.sdk.models.operations.SDKMethodInterfaces.*;
import com.styra.opa.sdk.utils.HTTPClient;
import com.styra.opa.sdk.utils.HTTPRequest;
import com.styra.opa.sdk.utils.JSON;
import com.styra.opa.sdk.utils.RetryConfig;
import com.styra.opa.sdk.utils.SerializedBody;
import com.styra.opa.sdk.utils.SpeakeasyHTTPClient;
import com.styra.opa.sdk.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * https://docs.styra.com/enterprise-opa - Enterprise OPA documentation
 */
public class Opa implements
            MethodCallExecutePolicy,
            MethodCallExecutePolicyWithInput,
            MethodCallHealth {
    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * Local development server
         */
        "http://localhost:8181",
    };

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = com.styra.opa.sdk.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Opa build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Opa(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Opa(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    public com.styra.opa.sdk.models.operations.ExecutePolicyRequestBuilder executePolicy() {
        return new com.styra.opa.sdk.models.operations.ExecutePolicyRequestBuilder(this);
    }

    /**
     * Execute a policy
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.styra.opa.sdk.models.operations.ExecutePolicyResponse executePolicy(
            com.styra.opa.sdk.models.operations.ExecutePolicyRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.styra.opa.sdk.utils.Utils.generateURL(
                com.styra.opa.sdk.models.operations.ExecutePolicyRequest.class,
                baseUrl,
                "/v1/data/{path}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.styra.opa.sdk.utils.Utils.getQueryParams(
                com.styra.opa.sdk.models.operations.ExecutePolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = com.styra.opa.sdk.utils.Utils.getHeaders(request, null);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.styra.opa.sdk.models.operations.ExecutePolicyResponse.Builder resBuilder = 
            com.styra.opa.sdk.models.operations.ExecutePolicyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.styra.opa.sdk.models.operations.ExecutePolicyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation>() {});
                res.withSuccessfulPolicyEvaluation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.ClientError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.ClientError>() {});
                res.withClientError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 500) {
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.ServerError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.ServerError>() {});
                res.withServerError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

    public com.styra.opa.sdk.models.operations.ExecutePolicyWithInputRequestBuilder executePolicyWithInput() {
        return new com.styra.opa.sdk.models.operations.ExecutePolicyWithInputRequestBuilder(this);
    }

    /**
     * Execute a policy given an input
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.styra.opa.sdk.models.operations.ExecutePolicyWithInputResponse executePolicyWithInput(
            com.styra.opa.sdk.models.operations.ExecutePolicyWithInputRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.styra.opa.sdk.utils.Utils.generateURL(
                com.styra.opa.sdk.models.operations.ExecutePolicyWithInputRequest.class,
                baseUrl,
                "/v1/data/{path}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.styra.opa.sdk.models.operations.ExecutePolicyWithInputRequest>() {});
        SerializedBody serializedRequestBody = com.styra.opa.sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.styra.opa.sdk.utils.Utils.getQueryParams(
                com.styra.opa.sdk.models.operations.ExecutePolicyWithInputRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = com.styra.opa.sdk.utils.Utils.getHeaders(request, null);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.styra.opa.sdk.models.operations.ExecutePolicyWithInputResponse.Builder resBuilder = 
            com.styra.opa.sdk.models.operations.ExecutePolicyWithInputResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.styra.opa.sdk.models.operations.ExecutePolicyWithInputResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation>() {});
                res.withSuccessfulPolicyEvaluation(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.ClientError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.ClientError>() {});
                res.withClientError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 500) {
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.ServerError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.ServerError>() {});
                res.withServerError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

    public com.styra.opa.sdk.models.operations.HealthRequestBuilder health() {
        return new com.styra.opa.sdk.models.operations.HealthRequestBuilder(this);
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @param bundles Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     * @param plugins Boolean parameter to account for plugin status in response.
     * @param excludePlugin String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.styra.opa.sdk.models.operations.HealthResponse health(
            Optional<? extends Boolean> bundles,
            Optional<? extends Boolean> plugins,
            Optional<? extends java.util.List<String>> excludePlugin) throws Exception {
        com.styra.opa.sdk.models.operations.HealthRequest request =
            com.styra.opa.sdk.models.operations.HealthRequest
                .builder()
                .bundles(bundles)
                .plugins(plugins)
                .excludePlugin(excludePlugin)
                .build();
        

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.styra.opa.sdk.utils.Utils.generateURL(
                baseUrl,
                "/health");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.styra.opa.sdk.utils.Utils.getQueryParams(
                com.styra.opa.sdk.models.operations.HealthRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.styra.opa.sdk.models.operations.HealthResponse.Builder resBuilder = 
            com.styra.opa.sdk.models.operations.HealthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.styra.opa.sdk.models.operations.HealthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.HealthyServer out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.HealthyServer>() {});
                res.withHealthyServer(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 500) {
            if (com.styra.opa.sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.sdk.models.shared.UnhealthyServer out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.styra.opa.sdk.models.shared.UnhealthyServer>() {});
                res.withUnhealthyServer(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }



}
