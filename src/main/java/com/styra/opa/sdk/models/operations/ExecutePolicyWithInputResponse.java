/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import com.styra.opa.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;


public class ExecutePolicyWithInputResponse implements com.styra.opa.sdk.utils.Response {

    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<InputStream> rawResponse;

    /**
     * Success.
     * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
     * 
     */
    private Optional<? extends com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation> successfulPolicyEvaluation;

    /**
     * Bad Request
     */
    private Optional<? extends com.styra.opa.sdk.models.shared.ClientError> clientError;

    /**
     * Server Error
     */
    private Optional<? extends com.styra.opa.sdk.models.shared.ServerError> serverError;

    private java.util.Map<String, java.util.List<String>> headers;

    @JsonCreator
    public ExecutePolicyWithInputResponse(
            String contentType,
            int statusCode,
            HttpResponse<InputStream> rawResponse,
            Optional<? extends com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation> successfulPolicyEvaluation,
            Optional<? extends com.styra.opa.sdk.models.shared.ClientError> clientError,
            Optional<? extends com.styra.opa.sdk.models.shared.ServerError> serverError,
            java.util.Map<String, java.util.List<String>> headers) {
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(rawResponse, "rawResponse");
        Utils.checkNotNull(successfulPolicyEvaluation, "successfulPolicyEvaluation");
        Utils.checkNotNull(clientError, "clientError");
        Utils.checkNotNull(serverError, "serverError");
        headers = Utils.emptyMapIfNull(headers);
        this.contentType = contentType;
        this.statusCode = statusCode;
        this.rawResponse = rawResponse;
        this.successfulPolicyEvaluation = successfulPolicyEvaluation;
        this.clientError = clientError;
        this.serverError = serverError;
        this.headers = headers;
    }
    
    public ExecutePolicyWithInputResponse(
            String contentType,
            int statusCode,
            HttpResponse<InputStream> rawResponse,
            java.util.Map<String, java.util.List<String>> headers) {
        this(contentType, statusCode, rawResponse, Optional.empty(), Optional.empty(), Optional.empty(), headers);
    }

    /**
     * HTTP response content type for this operation
     */
    public String contentType() {
        return contentType;
    }

    /**
     * HTTP response status code for this operation
     */
    public int statusCode() {
        return statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public HttpResponse<InputStream> rawResponse() {
        return rawResponse;
    }

    /**
     * Success.
     * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
     * 
     */
    public Optional<? extends com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation> successfulPolicyEvaluation() {
        return successfulPolicyEvaluation;
    }

    /**
     * Bad Request
     */
    public Optional<? extends com.styra.opa.sdk.models.shared.ClientError> clientError() {
        return clientError;
    }

    /**
     * Server Error
     */
    public Optional<? extends com.styra.opa.sdk.models.shared.ServerError> serverError() {
        return serverError;
    }

    public java.util.Map<String, java.util.List<String>> headers() {
        return headers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * HTTP response content type for this operation
     */
    public ExecutePolicyWithInputResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    /**
     * HTTP response status code for this operation
     */
    public ExecutePolicyWithInputResponse withStatusCode(int statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ExecutePolicyWithInputResponse withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    /**
     * Success.
     * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
     * 
     */
    public ExecutePolicyWithInputResponse withSuccessfulPolicyEvaluation(com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation successfulPolicyEvaluation) {
        Utils.checkNotNull(successfulPolicyEvaluation, "successfulPolicyEvaluation");
        this.successfulPolicyEvaluation = Optional.ofNullable(successfulPolicyEvaluation);
        return this;
    }

    /**
     * Success.
     * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
     * 
     */
    public ExecutePolicyWithInputResponse withSuccessfulPolicyEvaluation(Optional<? extends com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation> successfulPolicyEvaluation) {
        Utils.checkNotNull(successfulPolicyEvaluation, "successfulPolicyEvaluation");
        this.successfulPolicyEvaluation = successfulPolicyEvaluation;
        return this;
    }

    /**
     * Bad Request
     */
    public ExecutePolicyWithInputResponse withClientError(com.styra.opa.sdk.models.shared.ClientError clientError) {
        Utils.checkNotNull(clientError, "clientError");
        this.clientError = Optional.ofNullable(clientError);
        return this;
    }

    /**
     * Bad Request
     */
    public ExecutePolicyWithInputResponse withClientError(Optional<? extends com.styra.opa.sdk.models.shared.ClientError> clientError) {
        Utils.checkNotNull(clientError, "clientError");
        this.clientError = clientError;
        return this;
    }

    /**
     * Server Error
     */
    public ExecutePolicyWithInputResponse withServerError(com.styra.opa.sdk.models.shared.ServerError serverError) {
        Utils.checkNotNull(serverError, "serverError");
        this.serverError = Optional.ofNullable(serverError);
        return this;
    }

    /**
     * Server Error
     */
    public ExecutePolicyWithInputResponse withServerError(Optional<? extends com.styra.opa.sdk.models.shared.ServerError> serverError) {
        Utils.checkNotNull(serverError, "serverError");
        this.serverError = serverError;
        return this;
    }

    public ExecutePolicyWithInputResponse withHeaders(java.util.Map<String, java.util.List<String>> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExecutePolicyWithInputResponse other = (ExecutePolicyWithInputResponse) o;
        return 
            java.util.Objects.deepEquals(this.contentType, other.contentType) &&
            java.util.Objects.deepEquals(this.statusCode, other.statusCode) &&
            java.util.Objects.deepEquals(this.rawResponse, other.rawResponse) &&
            java.util.Objects.deepEquals(this.successfulPolicyEvaluation, other.successfulPolicyEvaluation) &&
            java.util.Objects.deepEquals(this.clientError, other.clientError) &&
            java.util.Objects.deepEquals(this.serverError, other.serverError) &&
            java.util.Objects.deepEquals(this.headers, other.headers);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            contentType,
            statusCode,
            rawResponse,
            successfulPolicyEvaluation,
            clientError,
            serverError,
            headers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExecutePolicyWithInputResponse.class,
                "contentType", contentType,
                "statusCode", statusCode,
                "rawResponse", rawResponse,
                "successfulPolicyEvaluation", successfulPolicyEvaluation,
                "clientError", clientError,
                "serverError", serverError,
                "headers", headers);
    }
    
    public final static class Builder {
 
        private String contentType;
 
        private Integer statusCode;
 
        private HttpResponse<InputStream> rawResponse;
 
        private Optional<? extends com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation> successfulPolicyEvaluation = Optional.empty();
 
        private Optional<? extends com.styra.opa.sdk.models.shared.ClientError> clientError = Optional.empty();
 
        private Optional<? extends com.styra.opa.sdk.models.shared.ServerError> serverError = Optional.empty();
 
        private java.util.Map<String, java.util.List<String>> headers;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        /**
         * Success.
         * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
         * 
         */
        public Builder successfulPolicyEvaluation(com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation successfulPolicyEvaluation) {
            Utils.checkNotNull(successfulPolicyEvaluation, "successfulPolicyEvaluation");
            this.successfulPolicyEvaluation = Optional.ofNullable(successfulPolicyEvaluation);
            return this;
        }

        /**
         * Success.
         * The server also returns 200 if the path refers to an undefined document. In this case, the response will not contain a result property.
         * 
         */
        public Builder successfulPolicyEvaluation(Optional<? extends com.styra.opa.sdk.models.shared.SuccessfulPolicyEvaluation> successfulPolicyEvaluation) {
            Utils.checkNotNull(successfulPolicyEvaluation, "successfulPolicyEvaluation");
            this.successfulPolicyEvaluation = successfulPolicyEvaluation;
            return this;
        }

        /**
         * Bad Request
         */
        public Builder clientError(com.styra.opa.sdk.models.shared.ClientError clientError) {
            Utils.checkNotNull(clientError, "clientError");
            this.clientError = Optional.ofNullable(clientError);
            return this;
        }

        /**
         * Bad Request
         */
        public Builder clientError(Optional<? extends com.styra.opa.sdk.models.shared.ClientError> clientError) {
            Utils.checkNotNull(clientError, "clientError");
            this.clientError = clientError;
            return this;
        }

        /**
         * Server Error
         */
        public Builder serverError(com.styra.opa.sdk.models.shared.ServerError serverError) {
            Utils.checkNotNull(serverError, "serverError");
            this.serverError = Optional.ofNullable(serverError);
            return this;
        }

        /**
         * Server Error
         */
        public Builder serverError(Optional<? extends com.styra.opa.sdk.models.shared.ServerError> serverError) {
            Utils.checkNotNull(serverError, "serverError");
            this.serverError = serverError;
            return this;
        }

        public Builder headers(java.util.Map<String, java.util.List<String>> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }
        
        public ExecutePolicyWithInputResponse build() {
            return new ExecutePolicyWithInputResponse(
                contentType,
                statusCode,
                rawResponse,
                successfulPolicyEvaluation,
                clientError,
                serverError,
                headers);
        }
    }
}

