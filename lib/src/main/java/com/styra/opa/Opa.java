/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.styra.opa.utils.HTTPClient;
import com.styra.opa.utils.HTTPRequest;
import com.styra.opa.utils.JSON;
import com.styra.opa.utils.SerializedBody;
import com.styra.opa.utils.SpeakeasyHTTPClient;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;

/**
 * https://docs.styra.com/enterprise-opa - Enterprise OPA documentation
 */
public class Opa {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Local development server
         */
        "http://localhost:8181",
	};
	
	
	
  		

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = com.styra.opa.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public Opa build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new Opa(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private Opa(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Execute a policy
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.ExecutePolicyResponse executePolicy(com.styra.opa.models.operations.ExecutePolicyRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = com.styra.opa.utils.Utils.generateURL(com.styra.opa.models.operations.ExecutePolicyRequest.class, baseUrl, "/v1/data/{path}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = com.styra.opa.utils.Utils.getQueryParams(com.styra.opa.models.operations.ExecutePolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = com.styra.opa.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        com.styra.opa.models.operations.ExecutePolicyResponse res = new com.styra.opa.models.operations.ExecutePolicyResponse(contentType, httpRes.statusCode(), httpRes, null) {{
            successfulPolicyEvaluation = null;
            clientError = null;
            serverError = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.SuccessfulPolicyEvaluation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.SuccessfulPolicyEvaluation.class);
                res.successfulPolicyEvaluation = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.ClientError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.ClientError.class);
                res.clientError = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.ServerError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.ServerError.class);
                res.serverError = out;
            }
        }

        return res;
    }

    /**
     * Execute a policy given an input
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.ExecutePolicyWithInputResponse executePolicyWithInput(com.styra.opa.models.operations.ExecutePolicyWithInputRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = com.styra.opa.utils.Utils.generateURL(com.styra.opa.models.operations.ExecutePolicyWithInputRequest.class, baseUrl, "/v1/data/{path}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = com.styra.opa.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = com.styra.opa.utils.Utils.getQueryParams(com.styra.opa.models.operations.ExecutePolicyWithInputRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = com.styra.opa.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        com.styra.opa.models.operations.ExecutePolicyWithInputResponse res = new com.styra.opa.models.operations.ExecutePolicyWithInputResponse(contentType, httpRes.statusCode(), httpRes, null) {{
            successfulPolicyEvaluation = null;
            clientError = null;
            serverError = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.SuccessfulPolicyEvaluation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.SuccessfulPolicyEvaluation.class);
                res.successfulPolicyEvaluation = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.ClientError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.ClientError.class);
                res.clientError = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.ServerError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.ServerError.class);
                res.serverError = out;
            }
        }

        return res;
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.HealthResponse health() throws Exception {
        return this.health(null, null, null);
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @param excludePlugin String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.HealthResponse health(String[] excludePlugin) throws Exception {
        return this.health(null, null, excludePlugin);
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @param bundles Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.HealthResponse health(Boolean bundles) throws Exception {
        return this.health(bundles, null, null);
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @param bundles Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     * @param excludePlugin String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.HealthResponse health(Boolean bundles, String[] excludePlugin) throws Exception {
        return this.health(bundles, null, excludePlugin);
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @param bundles Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     * @param plugins Boolean parameter to account for plugin status in response.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.HealthResponse health(Boolean bundles, Boolean plugins) throws Exception {
        return this.health(bundles, plugins, null);
    }

    /**
     * Verify the server is operational
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     * @param bundles Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     * @param plugins Boolean parameter to account for plugin status in response.
     * @param excludePlugin String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.styra.opa.models.operations.HealthResponse health(Boolean bundles, Boolean plugins, String[] excludePlugin) throws Exception {
        com.styra.opa.models.operations.HealthRequest request = new com.styra.opa.models.operations.HealthRequest();
        request.bundles=bundles;
        request.plugins=plugins;
        request.excludePlugin=excludePlugin;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = com.styra.opa.utils.Utils.generateURL(baseUrl, "/health");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = com.styra.opa.utils.Utils.getQueryParams(com.styra.opa.models.operations.HealthRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        com.styra.opa.models.operations.HealthResponse res = new com.styra.opa.models.operations.HealthResponse(contentType, httpRes.statusCode(), httpRes) {{
            healthyServer = null;
            unhealthyServer = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.HealthyServer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.HealthyServer.class);
                res.healthyServer = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (com.styra.opa.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.styra.opa.models.shared.UnhealthyServer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.styra.opa.models.shared.UnhealthyServer.class);
                res.unhealthyServer = out;
            }
        }

        return res;
    }
}