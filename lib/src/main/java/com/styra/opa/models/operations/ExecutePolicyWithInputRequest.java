/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.styra.opa.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.styra.opa.utils.SpeakeasyMetadata;


public class ExecutePolicyWithInputRequest {
    /**
     * The path separator is used to access values inside object and array documents. If the path indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=path")
    public String path;

    public ExecutePolicyWithInputRequest withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Indicates that the request body is gzip encoded
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Content-Encoding")
    public com.styra.opa.models.shared.GzipContentEncoding contentEncoding;

    public ExecutePolicyWithInputRequest withContentEncoding(com.styra.opa.models.shared.GzipContentEncoding contentEncoding) {
        this.contentEncoding = contentEncoding;
        return this;
    }
    
    /**
     * Indicates the server should respond with a gzip encoded body. The server will send the compressed response only if its length is above `server.encoding.gzip.min_length` value. See the configuration section
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Accept-Encoding")
    public com.styra.opa.models.shared.GzipAcceptEncoding acceptEncoding;

    public ExecutePolicyWithInputRequest withAcceptEncoding(com.styra.opa.models.shared.GzipAcceptEncoding acceptEncoding) {
        this.acceptEncoding = acceptEncoding;
        return this;
    }
    
    /**
     * If parameter is `true`, response will formatted for humans.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pretty")
    public Boolean pretty;

    public ExecutePolicyWithInputRequest withPretty(Boolean pretty) {
        this.pretty = pretty;
        return this;
    }
    
    /**
     * If parameter is true, response will include build/version info in addition to the result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=provenance")
    public Boolean provenance;

    public ExecutePolicyWithInputRequest withProvenance(Boolean provenance) {
        this.provenance = provenance;
        return this;
    }
    
    /**
     * Return query explanation in addition to result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=explain")
    public com.styra.opa.models.shared.Explain explain;

    public ExecutePolicyWithInputRequest withExplain(com.styra.opa.models.shared.Explain explain) {
        this.explain = explain;
        return this;
    }
    
    /**
     * Return query performance metrics in addition to result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metrics")
    public Boolean metrics;

    public ExecutePolicyWithInputRequest withMetrics(Boolean metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * Instrument query evaluation and return a superset of performance metrics in addition to result.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=instrument")
    public Boolean instrument;

    public ExecutePolicyWithInputRequest withInstrument(Boolean instrument) {
        this.instrument = instrument;
        return this;
    }
    
    /**
     * Treat built-in function call errors as fatal and return an error immediately.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=strict-builtin-errors")
    public Boolean strictBuiltinErrors;

    public ExecutePolicyWithInputRequest withStrictBuiltinErrors(Boolean strictBuiltinErrors) {
        this.strictBuiltinErrors = strictBuiltinErrors;
        return this;
    }
    
    /**
     * The input document
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    public ExecutePolicyWithInputRequestBody requestBody;

    public ExecutePolicyWithInputRequest withRequestBody(ExecutePolicyWithInputRequestBody requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    public ExecutePolicyWithInputRequest(@JsonProperty("path") String path, @JsonProperty("RequestBody") ExecutePolicyWithInputRequestBody requestBody) {
        this.path = path;
        this.requestBody = requestBody;
  }
}
